# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificacion para el emulador           ;
  2   0000                  ORG $8000 ;Programa empieza en $8000                           ;
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0                                 ;
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD 57 82         CALL STARTSCREEN ;Se llama a la pantalla de inicio
  7   8006              gameInit:
  8   8006 CD 3F 80         CALL MAINGAME ;Se llama al juego
  9   8009              gameEnd:
 10   8009 CD 0E 80         CALL ENDSCREEN ;Se llama a la pantalla final
 11   800C
 12   800C 18 FE        mainEnd: JR mainEnd ;Se queda en un bucle infinito
 13   800E              ;-------------------------------------------------------------------
 14   800E                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800E              ENDSCREEN:
  2+  800E CD 6B 83         CALL CLEARSCR
  3+  8011              ;--------------------------------------------------
  4+  8011              ;Imprime el GAME OVER
  5+  8011 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8013 06 0A            LD B,10    ; Coordenada de la fila
  7+  8015 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8017 DD 21 1F 80      LD IX, GameOverText   ; Se añade el título
  9+  801B CD FA 82         CALL PRINTAT
 10+  801E C9               RET
 11+  801F
 12+  801F
 13+  801F
 14+  801F
 15+  801F              ;---------------------------------------------------------
 16+  801F 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8023 20 4F 56 45
 16+  8027 52 00
 17+  8029 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802D 61 20 6A 75
 17+  8031 67 61 72 20
 17+  8035 64 65 20 6E
 17+  8039 75 65 76 6F
 17+  803D 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 15   803F                  INCLUDE game.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
  1+  803F              MAINGAME:                                 ;
  2+  803F CD 6B 83         CALL CLEARSCR  ;Limpia la pantalla    ;
  3+  8042              ;------------------------------------------
  4+  8042 CD 52 80         CALL CREATEBOARD ; Crea el tablero
  5+  8045              gameflow:
  6+  8045 CD 9A 81         CALL RANDOMTETRO ; Geneta un tetromino aleatorio
  7+  8048 CD F7 80         CALL TETRODOWN ; Llama a la funcion que dibuja y mueve el tetromino hacia abajo
  8+  804B FE FE            CP 254 ;Comprueba el gaemover
  9+  804D 20 F6            JR NZ, gameflow ;Si no es gameover, sigue el juego
 10+  804F C9               RET ; Si es gameover, sale del juego
 11+  8050
 12+  8050 18 FE        fin: JR fin
 13+  8052              ;-----------------------------------------
 14+  8052                  INCLUDE create-board.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
  1++ 8052              CREATEBOARD:                                 ;
  2++ 8052 CD 6B 83         CALL CLEARSCR                         ;
  3++ 8055              ANCHO EQU 14                              ;
  4++ 8055              LARGO EQU 22                              ;
  5++ 8055              ;------------------------------------------
  6++ 8055 CD 81 87         CALL Tetris_3D
  7++ 8058 3E 20            LD A, 32
  8++ 805A D6 02            SUB 2
  9++ 805C D6 0E            SUB ANCHO
 10++ 805E CB 3F            SRL A
 11++ 8060 4F               LD C, A
 12++ 8061 3E 00            LD A, 0
 13++ 8063 C6 1F            ADD (32 - 1)
 14++ 8065 47               LD B, A
 15++ 8066 21 00 58         LD HL, $5800
 16++ 8069              bucle1:
 17++ 8069 23               INC HL
 18++ 806A 10 FD            DJNZ bucle1
 19++ 806C 06 16            LD B, LARGO
 20++ 806E              bucle:
 21++ 806E C5               PUSH BC
 22++ 806F 41               LD B, C
 23++ 8070              marco_izq:
 24++ 8070 23               INC HL
 25++ 8071 10 FD            DJNZ marco_izq
 26++ 8073 C5               PUSH BC
 27++ 8074              margenizq:
 28++ 8074 23               INC HL
 29++ 8075 0E 07            LD C, 7
 30++ 8077 79               LD A, C
 31++ 8078 87               ADD A
 32++ 8079 87               ADD A
 33++ 807A 87               ADD A
 34++ 807B 77               LD (HL), A
 35++ 807C 3E 00            LD A, 0
 36++ 807E 06 0E            LD B, ANCHO
 37++ 8080 80               ADD B
 38++ 8081 47               LD B, A
 39++ 8082              comienzo_ancho:
 40++ 8082 23               INC HL
 41++ 8083 10 FD            DJNZ comienzo_ancho
 42++ 8085              margendrcho:
 43++ 8085 23               INC HL
 44++ 8086 0E 07            LD C,7
 45++ 8088 79               LD A, C
 46++ 8089 87               ADD A
 47++ 808A 87               ADD A
 48++ 808B 87               ADD A
 49++ 808C 77               ld (HL), A
 50++ 808D
 51++ 808D C1               POP BC
 52++ 808E 41               LD B, C
 53++ 808F              marco_drcho
 54++ 808F 23               INC HL
 55++ 8090 10 FD            DJNZ marco_drcho
 56++ 8092 C1               POP BC
 57++ 8093 10 D9            DJNZ bucle
 58++ 8095
 59++ 8095 41               LD B, C
 60++ 8096              marco_izq_fila_ult:
 61++ 8096 23               INC HL
 62++ 8097 10 FD            DJNZ marco_izq_fila_ult
 63++ 8099              fila_ultima:
 64++ 8099 06 10            LD B, ANCHO + 2
 65++ 809B              bucle2:
 66++ 809B 23               INC HL
 67++ 809C 0E 07            LD C,7
 68++ 809E 79               LD A, C
 69++ 809F 87               ADD A
 70++ 80A0 87               ADD A
 71++ 80A1 87               ADD A
 72++ 80A2 77               ld (HL), A
 73++ 80A3 10 F6            DJNZ bucle2
 74++ 80A5
 75++ 80A5 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
 15+  80A6                  INCLUDE draw-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
  1++ 80A6              DRAWTETRO:
  2++ 80A6              ;---------------------------------------------
  3++ 80A6 DD 7E 00         LD A, (IX)
  4++ 80A9 57               LD D, A
  5++ 80AA DD 23            INC IX
  6++ 80AC 3A C7 81         LD A, (IXCounter)
  7++ 80AF 3C               INC A
  8++ 80B0 32 C7 81         LD (IXCounter), A
  9++ 80B3 DD 7E 00         LD A, (IX)
 10++ 80B6 5F               LD E, A
 11++ 80B7 42               LD B, D
 12++ 80B8              drawfilas:
 13++ 80B8 C5               PUSH BC
 14++ 80B9 43               LD B, E
 15++ 80BA              drawcolumnas:
 16++ 80BA 50               LD D, B
 17++ 80BB DD 23            INC IX
 18++ 80BD 3A C7 81         LD A, (IXCounter)
 19++ 80C0 3C               INC A
 20++ 80C1 32 C7 81         LD (IXCounter), A
 21++ 80C4 DD 7E 00         LD A, (IX)
 22++ 80C7 C1               POP BC
 23++ 80C8 4A               LD C, D
 24++ 80C9 CD D4 80         CALL DRAWPIXEL
 25++ 80CC C5               PUSH BC
 26++ 80CD 42               LD B, D
 27++ 80CE 10 EA            DJNZ drawcolumnas
 28++ 80D0 C1               POP BC
 29++ 80D1 10 E5            DJNZ drawfilas
 30++ 80D3
 31++ 80D3 C9               RET
 32++ 80D4              ;------------------------------------------
 33++ 80D4                  INCLUDE draw-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
  1+++80D4              DRAWPIXEL:
  2+++80D4 F5               PUSH AF
  3+++80D5 D5               PUSH DE
  4+++80D6 F5               PUSH AF
  5+++80D7 C5               PUSH BC
  6+++80D8              ;------------------------------------------------------
  7+++80D8 78               LD A, B
  8+++80D9 FD 86 00         ADD (IY)
  9+++80DC 47               LD B, A
 10+++80DD 68               LD L, B
 11+++80DE 26 00            LD H, 0 ; HL = B
 12+++80E0
 13+++80E0 29               ADD HL, HL
 14+++80E1 29               ADD HL, HL
 15+++80E2 29               ADD HL, HL
 16+++80E3 29               ADD HL, HL
 17+++80E4 29               ADD HL, HL; HL = HL *32
 18+++80E5 79               LD A, C
 19+++80E6 C6 0E            ADD 14
 20+++80E8 4F               LD C, A
 21+++80E9 59               LD E, C
 22+++80EA 16 00            LD D, 0 ; DE = C
 23+++80EC 19               ADD HL, DE
 24+++80ED 11 00 58         LD DE, $5800
 25+++80F0 19               ADD HL, DE ; HL = Y*32 + X + $5800
 26+++80F1 C1               POP BC
 27+++80F2 F1               POP AF
 28+++80F3 77               LD (HL), A
 29+++80F4 D1               POP DE
 30+++80F5 F1               POP AF
 31+++80F6 C9               RET
 32+++80F7              ;------------------------------------------------
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
 16+  80F7                  INCLUDE tetro-down.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
  1++ 80F7              TETRODOWN:
  2++ 80F7              ;-----------------------------------------
  3++ 80F7 FD 21 62 87      LD IY, row_coords
  4++ 80FB CD C9 81         CALL CHECKCOLISION
  5++ 80FE FE 64            CP 100
  6++ 8100 28 34            JR Z, goGameOver
  7++ 8102 CD 8C 81         CALL LASTPOSITION
  8++ 8105
  9++ 8105              down:
 10++ 8105 C5               PUSH BC
 11++ 8106 CD A6 80         CALL DRAWTETRO
 12++ 8109 CD 8C 81         CALL LASTPOSITION
 13++ 810C CD 3B 81         CALL TETRODEL
 14++ 810F CD 8C 81         CALL LASTPOSITION
 15++ 8112 CD 29 82         CALL TURNTETRO
 16++ 8115 FD 23            INC IY
 17++ 8117 CD C9 81         CALL CHECKCOLISION
 18++ 811A FE 64            CP 100
 19++ 811C 28 08            JR Z, nexttetro
 20++ 811E 20 00            JR NZ, downcontinue
 21++ 8120              downcontinue:
 22++ 8120 CD 8C 81         CALL LASTPOSITION
 23++ 8123 C1               POP BC
 24++ 8124 18 DF            JR down
 25++ 8126              nexttetro:
 26++ 8126 CD 8C 81         CALL LASTPOSITION
 27++ 8129 C1               POP BC
 28++ 812A FD 2B            DEC IY
 29++ 812C CD A6 80         CALL DRAWTETRO
 30++ 812F CD 8C 81         CALL LASTPOSITION
 31++ 8132 CD B4 81         CALL RETURNIY
 32++ 8135 C9               RET
 33++ 8136              goGameOver:
 34++ 8136 C1               POP BC
 35++ 8137 3E FE            LD A, 254
 36++ 8139 C9               RET
 37++ 813A              gamecontinue:
 38++ 813A C9               RET
 39++ 813B              ;----------------------------------------------------
 40++ 813B                  INCLUDE del-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
  1+++813B              TETRODEL:
  2+++813B              ;------------------------------------------------------
  3+++813B DD 7E 00         LD A, (IX)
  4+++813E 57               LD D, A
  5+++813F DD 23            INC IX
  6+++8141 3A C7 81         LD A, (IXCounter)
  7+++8144 3C               INC A
  8+++8145 32 C7 81         LD (IXCounter), A
  9+++8148 DD 7E 00         LD A, (IX)
 10+++814B 5F               LD E, A
 11+++814C 42               LD B, D
 12+++814D              rowdel:
 13+++814D C5               PUSH BC
 14+++814E 43               LD B, E
 15+++814F              columndel:
 16+++814F 50               LD D, B
 17+++8150 DD 23            INC IX
 18+++8152 3A C7 81         LD A, (IXCounter)
 19+++8155 3C               INC A
 20+++8156 32 C7 81         LD (IXCounter), A
 21+++8159 3E 00            LD A, 0
 22+++815B C1               POP BC
 23+++815C 4A               LD C, D
 24+++815D CD 68 81         CALL DELPIXEL
 25+++8160 C5               PUSH BC
 26+++8161 42               LD B, D
 27+++8162 10 EB            DJNZ columndel
 28+++8164 C1               POP BC
 29+++8165 10 E6            DJNZ rowdel
 30+++8167
 31+++8167 C9               RET
 32+++8168              ;-----------------------------------------
 33+++8168                  INCLUDE del-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
  1+++8168              DELPIXEL:
  2+++8168              ;--------------------------------------------------
  3+++8168 F5               PUSH AF
  4+++8169 D5               PUSH DE
  5+++816A F5               PUSH AF
  6+++816B C5               PUSH BC
  7+++816C
  8+++816C 78               LD A, B
  9+++816D FD 86 00         ADD (IY)
 10+++8170 47               LD B, A
 11+++8171 68               LD L, B
 12+++8172 26 00            LD H, 0 ; HL = B
 13+++8174
 14+++8174 29               ADD HL, HL
 15+++8175 29               ADD HL, HL
 16+++8176 29               ADD HL, HL
 17+++8177 29               ADD HL, HL
 18+++8178 29               ADD HL, HL; HL = HL *32
 19+++8179 79               LD A, C
 20+++817A C6 0E            ADD 14
 21+++817C 4F               LD C, A
 22+++817D 59               LD E, C
 23+++817E 16 00            LD D, 0 ; DE = C
 24+++8180 19               ADD HL, DE
 25+++8181 11 00 58         LD DE, $5800
 26+++8184 19               ADD HL, DE ; HL = Y*32 + X + $5800
 27+++8185 C1               POP BC
 28+++8186 F1               POP AF
 29+++8187 36 00            LD (HL), 0
 30+++8189 D1               POP DE
 31+++818A F1               POP AF
 32+++818B C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
 41++ 818C                  INCLUDE last-position.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
  1+++818C              LASTPOSITION:
  2+++818C              ;---------------------------
  3+++818C 3A C7 81         LD A, (IXCounter)
  4+++818F 47               LD B, A
  5+++8190              return:
  6+++8190 DD 2B            DEC IX
  7+++8192 10 FC            DJNZ return
  8+++8194
  9+++8194 3E 00            LD A, 0
 10+++8196 32 C7 81         LD (IXCounter), A
 11+++8199 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
 42++ 819A                  INCLUDE tetro-random.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
  1+++819A              RANDOMTETRO:
  2+++819A ED 5F            LD A, R
  3+++819C E6 1F            AND 31
  4+++819E FE 13            CP 19
  5+++81A0 38 02            JR C, continue
  6+++81A2 D6 13            SUB 19
  7+++81A4              continue:
  8+++81A4 DD 21 7E 86      LD IX, T_O
  9+++81A8 11 0C 00         LD DE, ANCHOTETRO
 10+++81AB B7               OR A
 11+++81AC 28 05            JR Z, randomend
 12+++81AE              more:
 13+++81AE DD 19            ADD IX, DE
 14+++81B0 3D               DEC A
 15+++81B1 20 FB            JR NZ, more
 16+++81B3
 17+++81B3              randomend:
 18+++81B3 C9               RET
 19+++81B4              ;-------------------------------
 20+++81B4              ANCHOTETRO EQU T_L1 - T_O
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
 43++ 81B4                  INCLUDE IYReturn.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
  1+++81B4              RETURNIY:
  2+++81B4              ;----------------------------
  3+++81B4 FD 7E 00         LD A, (IY)
  4+++81B7 FE 00            CP 0
  5+++81B9 28 04            JR Z, final
  6+++81BB FD 2B            DEC IY
  7+++81BD 18 F5            JR RETURNIY
  8+++81BF
  9+++81BF
 10+++81BF              final:
 11+++81BF C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
 17+  81C0                  INCLUDE position-coords.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
  1++ 81C0              gamestatusstruct:
  2++ 81C0              ;--------------------
  3++ 81C0
  4++ 81C0 00           GameX: DB 0
  5++ 81C1 00           GameY: DB 0
  6++ 81C2 00 00        TetroPtr: DW 0
  7++ 81C4 00 00        DownCounter: DW 0
  8++ 81C6 00           UndoKey: DB 0
  9++ 81C7 00           IXCounter: DB 0
 10++ 81C8 00           PosibleColor: DB 0
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
 18+  81C9                  INCLUDE check-colision.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
  1++ 81C9              CHECKCOLISION:
  2++ 81C9              ;--------------------------------------------
  3++ 81C9 DD 7E 00         LD A, (IX)
  4++ 81CC 57               LD D, A
  5++ 81CD DD 23            INC IX
  6++ 81CF 3A C7 81         LD A, (IXCounter)
  7++ 81D2 3C               INC A
  8++ 81D3 32 C7 81         LD (IXCounter), A
  9++ 81D6 DD 7E 00         LD A, (IX)
 10++ 81D9 5F               LD E, A
 11++ 81DA 42               LD B, D
 12++ 81DB              fil:
 13++ 81DB C5               PUSH BC
 14++ 81DC 43               LD B, E
 15++ 81DD              cols:
 16++ 81DD 50               LD D, B
 17++ 81DE DD 23            INC IX
 18++ 81E0 3A C7 81         LD A, (IXCounter)
 19++ 81E3 3C               INC A
 20++ 81E4 32 C7 81         LD (IXCounter), A
 21++ 81E7 DD 7E 00         LD A, (IX)
 22++ 81EA 32 C8 81         LD (PosibleColor), A
 23++ 81ED C1               POP BC
 24++ 81EE 4A               LD C, D
 25++ 81EF CD 08 82         CALL comprobarpunto
 26++ 81F2 FE 00            CP 0
 27++ 81F4 28 0A            JR Z, no_hay_color
 28++ 81F6              puede_haber_color:
 29++ 81F6 3A C8 81         LD A, (PosibleColor)
 30++ 81F9 FE 00            CP 0
 31++ 81FB 28 03            JR Z, no_hay_color
 32++ 81FD              hay_color:
 33++ 81FD 3E 64            LD A, 100
 34++ 81FF C9               RET
 35++ 8200              no_hay_color:
 36++ 8200 C5               PUSH BC
 37++ 8201 42               LD B, D
 38++ 8202 10 D9            DJNZ cols
 39++ 8204 C1               POP BC
 40++ 8205 10 D4            DJNZ fil
 41++ 8207
 42++ 8207 C9               RET
 43++ 8208              ;----------------------------------------
 44++ 8208                  INCLUDE check-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
  1+++8208              comprobarpunto:
  2+++8208              ;-------------------------------------------------------
  3+++8208 D5               PUSH DE
  4+++8209 F5               PUSH AF
  5+++820A C5               PUSH BC
  6+++820B
  7+++820B 68               LD L, B
  8+++820C FD 7E 00         LD A, (IY)
  9+++820F 85               ADD L
 10+++8210 6F               LD L, A
 11+++8211 26 00            LD H, 0 ; HL = B
 12+++8213 29               ADD HL, HL
 13+++8214 29               ADD HL, HL
 14+++8215 29               ADD HL, HL
 15+++8216 29               ADD HL, HL
 16+++8217 29               ADD HL, HL; HL = HL *32
 17+++8218 79               LD A, C
 18+++8219 C6 0E            ADD 14
 19+++821B 4F               LD C, A
 20+++821C 59               LD E, C
 21+++821D 16 00            LD D, 0 ; DE = C
 22+++821F 19               ADD HL, DE
 23+++8220 11 00 58         LD DE, $5800
 24+++8223 19               ADD HL, DE ; HL = Y*32 + X + $5800
 25+++8224 C1               POP BC
 26+++8225 F1               POP AF
 27+++8226 D1               POP DE
 28+++8227 7E               LD A, (HL)
 29+++8228 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
 19+  8229                  INCLUDE turn-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
  1++ 8229              TURNTETRO:
  2++ 8229              ;--------------------------------------------------------------------
  3++ 8229
  4++ 8229 01 FE FB         LD BC,$FBFE        ; Escanear línea  T,R,E,W,Q
  5++ 822C ED 78            IN A,(C)
  6++ 822E CB 47            BIT 0,A
  7++ 8230 28 11            JR Z, turn_left    ; Han pulsado Q -> Girar izquierda
  8++ 8232 CB 4F            BIT 1,A
  9++ 8234 20 00            JR NZ, turn_right  ; Han pulsado W -> Girar derecha
 10++ 8236
 11++ 8236              turn_right:
 12++ 8236 DD 6E 0A         LD L, (IX + 10)
 13++ 8239 DD 66 0B         LD H, (IX + 11)
 14++ 823C E5 DD E1         LD IX, HL
 15++ 823F 18 0E            JR SoltarTecla     ; Esperar q que suelten la tecla
 16++ 8241 18 13            JR no_tecla         ; No hay tecla pulsada
 17++ 8243
 18++ 8243              turn_left:
 19++ 8243 DD 6E 08         LD L, (IX + 8)
 20++ 8246 DD 66 09         LD H, (IX + 9)
 21++ 8249 E5 DD E1         LD IX, HL
 22++ 824C 18 01            JR SoltarTecla     ; Esperar q que suelten la tecla
 23++ 824E C9               RET
 24++ 824F
 25++ 824F
 26++ 824F              SoltarTecla:           ; Rutina de espera hasta que se suelta la tecla
 27++ 824F ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 28++ 8251 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 29++ 8253 20 FA            JR NZ,SoltarTecla  ; esperar hasta que no haya tecla pulsada
 30++ 8255 C9               RET
 31++ 8256
 32++ 8256              no_tecla:
 33++ 8256 C9               RET
 34++ 8257
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
 20+  8257
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
 16   8257                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  8257
  2+  8257              STARTSCREEN:                                   ;
  3+  8257 CD 6B 83         CALL CLEARSCR                              ;
  4+  825A CD 5D 82         CALL startInit                             ;
  5+  825D              ;-----------------------------------------------
  6+  825D              startInit:
  7+  825D              ;Imprimir título
  8+  825D 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  825F 06 03            LD B,3     ; Coordenada de la fila
 10+  8261 0E 08            LD C,8     ; Coordenada de la columna
 11+  8263 DD 21 BC 82      LD IX,StartTitle    ; Se añade el título
 12+  8267 CD FA 82         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  826A
 14+  826A              ;Imprimir pregunta
 15+  826A
 16+  826A 3E 04            LD A,4  ; Se da formato de color al texto
 17+  826C 06 0E            LD B,14 ; Coordenada de la fila
 18+  826E 0E 02            LD C,2  ; Coordenada de la columna
 19+  8270 DD 21 CE 82      LD IX,StartQuestion ; Se añade la pregunta
 20+  8274 CD FA 82         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  8277
 22+  8277 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  8279 0E 1C            LD C,28 ; y 28(Columna)
 24+  827B CD 84 82         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  827E 3E 84            LD A,4+$80  ; Se le da el formato
 26+  8280 77               LD (HL),A   ; Se imprime el cursor
 27+  8281
 28+  8281 CD 9F 82         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  8284
 30+  8284
 31+  8284              ;Función para guardar coordenadas
 32+  8284              Coor_Atrib:
 33+  8284 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  8285 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  8286 CB 3C            SRL H
 35+  8288 CB 3C          SRL H
 35+  828A CB 3C          SRL H
 36+  828C 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  828D CB 27            SLA A
 37+  828F CB 27          SLA A
 37+  8291 CB 27          SLA A
 37+  8293 CB 27          SLA A
 37+  8295 CB 27          SLA a
 38+  8297 B1               OR c  ; Y C son los bits 0-4 de L
 39+  8298 6F               LD L,A
 40+  8299 01 00 58         LD BC, $5800
 41+  829C 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  829D F1               POP AF ; Se devuelve el registro AF del stack
 43+  829E C9               RET
 44+  829F
 45+  829F              ;Rutina que guarda lo que pulsa el usuario
 46+  829F              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  829F 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  82A2 ED 78            IN A,(C)
 49+  82A4 CB 5F            BIT 3,A
 50+  82A6 28 0C            JR Z,T_N            ; Han pulsado N
 51+  82A8 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  82AB ED 78            IN A,(C)
 53+  82AD CB 4F            BIT 1,A
 54+  82AF 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  82B1
 56+  82B1              T_S:
 57+  82B1 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  82B3 C9               RET
 59+  82B4
 60+  82B4              T_N:
 61+  82B4 C9               RET
 62+  82B5
 63+  82B5              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  82B5 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  82B7 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  82B9 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  82BB C9               RET
 68+  82BC
 69+  82BC              ;----------------------------------------------------------------------------
 70+  82BC              ; Carga de ficheros y "variables"
 71+  82BC 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  82C0 4F 4D 45 20
 71+  82C4 54 4F 20 54
 71+  82C8 45 54 52 49
 71+  82CC 53 00
 72+  82CE 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  82D2 69 61 72 20
 72+  82D6 75 6E 61 20
 72+  82DA 70 61 72 74
 72+  82DE 69 64 61 3F
 72+  82E2 20 28 53 2F
 72+  82E6 4E 29 00
 73+  82E9 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  82ED 63 6F 6E 74
 73+  82F1 65 73 74 61
 73+  82F5 64 6F 3A 20
 73+  82F9 00
 74+  82FA
 75+  82FA
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 17   82FA                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  82FA              ; -------------------------------
  2+  82FA              ; ZX Spectrum Text print library
  3+  82FA              ; Daniel León - AOC - UFV 2020
  4+  82FA              ; -------------------------------
  5+  82FA
  6+  82FA
  7+  82FA              ; ----------------------------------------------------------------------------------------
  8+  82FA              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  82FA              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  82FA              ;		IN	B	: Row 0..23
 11+  82FA              ;		IN	C	: Column 0..31
 12+  82FA              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  82FA              ; ----------------------------------------------------------------------------------------
 14+  82FA CD 09 83     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  82FD              ; ----------------------------------------------------------------------------------------
 16+  82FD              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  82FD              ; ----------------------------------------------------------------------------------------
 18+  82FD              ; PRINTSTR - Prints String - IX Points to the String start
 19+  82FD              ; ----------------------------------------------------------------------------------------
 20+  82FD DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  8300 B7           			OR A						; check for end of string (0)
 22+  8301 C8           			RET Z						; Finish printing if 0
 23+  8302 CD 37 83     			CALL PRINTCHNUM
 24+  8305 DD 23        			INC IX						; Move to next char in string
 25+  8307 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8309              ; ----------------------------------------------------------------------------------------
 27+  8309
 28+  8309
 29+  8309              ;-----------------------------------------------------------------------------------------
 30+  8309              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8309              ;-----------------------------------------------------------------------------------------
 32+  8309 32 7D 83     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  830C CD 12 83     PREP_PRT_2:	CALL CRtoSCREEN
 34+  830F C3 24 83     			JP CRtoATTR
 35+  8312              ;-----------------------------------------------------------------------------------------
 36+  8312
 37+  8312              ;-----------------------------------------------------------------------------------------
 38+  8312              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  8312              ;	IN  - B=Row, C=Column
 40+  8312              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  8312              ;	Conversion:
 42+  8312              ;			Row FFfff   Column CCCCC
 43+  8312              ;			HL=%010FF000 fffCCCCC
 44+  8312              ;-----------------------------------------------------------------------------------------
 45+  8312              CRtoSCREEN:
 46+  8312 78           			LD A,B						; %___FFfff
 47+  8313 F6 40        			OR #40						; %010FFfff
 48+  8315 E6 F8        			AND #F8						; %010FF000
 49+  8317 67           			LD H,A
 50+  8318
 51+  8318 78           			LD A,B						; %___FFfff
 52+  8319 E6 07        			AND #7						; %00000fff
 53+  831B 0F           			RRCA						; %f00000ff
 54+  831C 0F           			RRCA						; %ff00000f
 55+  831D 0F           			RRCA						; %fff00000
 56+  831E B1           			OR C						; %fffCCCCC
 57+  831F 6F           			LD L,A
 58+  8320 22 79 83                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8323 C9                       RET
 60+  8324              ; ----------------------------------------------------------------------------------------
 61+  8324
 62+  8324
 63+  8324
 64+  8324              ;-----------------------------------------------------------------------------------------
 65+  8324              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8324              ;	IN  - B=Row, C=Column
 67+  8324              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8324              ;	Conversion:
 69+  8324              ;			Row FFfff   Column CCCCC
 70+  8324              ;			HL=%010110FF fffCCCCC
 71+  8324              ;-----------------------------------------------------------------------------------------
 72+  8324              CRtoATTR:
 73+  8324 78           			LD A,B						; %___FFfff
 74+  8325 0F           			RRCA						; %f000FFff
 75+  8326 0F           			RRCA						; %ff000FFf
 76+  8327 0F           			RRCA						; %fff000FF
 77+  8328 6F           			LD L,A
 78+  8329 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  832B F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  832D 67           			LD H,A
 81+  832E
 82+  832E 7D           			LD A,L						; %fff000FF
 83+  832F E6 E0        			AND #E0						; %fff00000
 84+  8331 B1           			OR C						; %fffCCCCC
 85+  8332 6F           			LD L,A
 86+  8333
 87+  8333 22 7B 83                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8336 C9                       RET
 89+  8337              ; ----------------------------------------------------------------------------------------
 90+  8337
 91+  8337
 92+  8337
 93+  8337              ; ----------------------------------------------------------------------------------------
 94+  8337              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8337              ;-----------------------------------------------------------------------------------------
 96+  8337              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8337 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8339 6F           			LD L,A
 99+  833A 29           			ADD HL,HL
100+  833B 29           			ADD HL,HL
101+  833C 29           			ADD HL,HL
102+  833D 11 7E 82     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8340 19           			ADD HL,DE
104+  8341 EB           			EX  DE,HL					;Value in DE
105+  8342              			; Continues to printchar below
106+  8342              ; ----------------------------------------------------------------------------------------
107+  8342
108+  8342
109+  8342              ; ----------------------------------------------------------------------------------------
110+  8342              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8342              ; ----------------------------------------------------------------------------------------
112+  8342              PRINTCHAR:
113+  8342 06 08        			LD B,8						; 8 Lines per char
114+  8344 2A 79 83                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8347
116+  8347 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8348 77           			LD (HL),A					; Move to Printing location
118+  8349 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  834A 13                       INC DE 						; next line to be printed
120+  834B 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  834D 3A 7D 83                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8350 2A 7B 83                 LD HL, (SCR_ATTR_PTR)
123+  8353 77                       LD (HL),A
124+  8354 21 7B 83                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8357 34                       INC (HL)					; Move Attribute cursor to next char
126+  8358 21 79 83     			LD HL, SCR_CUR_PTR
127+  835B 34           			INC (HL)					; update Cursor pointer to next position
128+  835C C9                       RET
129+  835D              ; ----------------------------------------------------------------------------------------
130+  835D
131+  835D
132+  835D
133+  835D              ; ----------------------------------------------------------------------------------------
134+  835D              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  835D              ; 				Sets bright 1 and flash 0
136+  835D              ; ----------------------------------------------------------------------------------------
137+  835D 3A 7D 83     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8360 E6 07                    AND 7						; get Attr INK in A
139+  8362 07           			RLCA
140+  8363 07           			RLCA
141+  8364 07           			RLCA						; move Ink to Paper
142+  8365 F6 40        			OR 64						; ink 0 bright 1
143+  8367 32 7D 83     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  836A C9           			RET
145+  836B              ; ----------------------------------------------------------------------------------------
146+  836B
147+  836B
148+  836B
149+  836B
150+  836B 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  836E 11 01 40     			LD DE,$4001
152+  8371 01 FF 1A     			LD BC,6911
153+  8374 36 00        			LD (HL),0
154+  8376 ED B0        			LDIR
155+  8378 C9           			RET
156+  8379
157+  8379
158+  8379              SCR_CUR_PTR
158+  8379 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  837B 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  837D 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  837E
162+  837E              CHARSET: incbin "charset.bin"			; Charset used
163+  867E
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 18   867E                  INCLUDE fichas.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
  1+  867E              TETROMINOS:                            ;
  2+  867E              ;---------------------------------------
  3+  867E              ;Tetromino O
  4+  867E 02 02 30 30  T_O: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  4+  8682 30 30 00 00
  4+  8686 7E 86 7E 86    DW T_O, T_O
  5+  868A              ;Tetromino L
  6+  868A 03 02 20 00  T_L1: DB 3, 2, 4*8, 0, 4*8, 0, 4*8, 4*8
  6+  868E 20 00 20 20
  6+  8692 96 86 A2 86    DW T_L2, T_L3
  7+  8696 02 03 00 00  T_L2: DB 2, 3, 0, 0, 4*8, 4*8, 4*8, 4*8
  7+  869A 20 20 20 20
  7+  869E AE 86 8A 86    DW T_L4, T_L1
  8+  86A2 02 03 20 20  T_L3: DB 2, 3, 4*8, 4*8, 4*8, 0, 0, 4*8
  8+  86A6 20 00 00 20
  8+  86AA 8A 86 AE 86    DW T_L1, T_L4
  9+  86AE 03 02 20 20  T_L4: DB 3, 2, 4*8, 4*8, 0, 4*8, 0, 4*8
  9+  86B2 00 20 00 20
  9+  86B6 A2 86 96 86    DW T_L3, T_L2
 10+  86BA              ;Tetromino J
 11+  86BA 03 02 00 10  T_J1: DB 3, 2, 0, 2*8, 0, 2*8, 2*8, 2*8
 11+  86BE 00 10 10 10
 11+  86C2 C6 86 D2 86    DW T_J2, T_J3
 12+  86C6 02 03 10 10  T_J2: DB 2, 3, 2*8, 2*8, 2*8, 0, 0, 2*8
 12+  86CA 10 00 00 10
 12+  86CE DE 86 BA 86    DW T_J4, T_J1
 13+  86D2 02 03 10 00  T_J3: DB 2, 3, 2*8, 0, 0, 2*8, 2*8, 2*8
 13+  86D6 00 10 10 10
 13+  86DA BA 86 DE 86    DW T_J1, T_J4
 14+  86DE 03 02 10 10  T_J4: DB 3, 2, 2*8, 2*8, 2*8, 0, 2*8, 0
 14+  86E2 10 00 10 00
 14+  86E6 C6 86 D2 86    DW T_J2, T_J3
 15+  86EA              ;Tetromino T
 16+  86EA 02 03 28 28  T_T1: DB 2, 3, 5*8, 5*8, 5*8, 0, 5*8, 0
 16+  86EE 28 00 28 00
 16+  86F2 F6 86 02 87    DW T_T2, T_T3
 17+  86F6 03 02 28 00  T_T2: DB 3, 2, 5*8, 0, 5*8, 5*8, 5*8, 0
 17+  86FA 28 28 28 00
 17+  86FE 0E 87 EA 86    DW T_T4, T_T1
 18+  8702 03 02 00 28  T_T3: DB 3, 2, 0, 5*8, 5*8, 5*8, 0, 5*8
 18+  8706 28 28 00 28
 18+  870A EA 86 0E 87    DW T_T1, T_T4
 19+  870E 02 03 00 28  T_T4: DB 2, 3, 0, 5*8, 0, 5*8, 5*8, 5*8
 19+  8712 00 28 28 28
 19+  8716 02 87 F6 86    DW T_T3, T_T2
 20+  871A              ;Tetromino I
 21+  871A 04 01 30 30  T_I1: DB 4, 1, 6*8, 6*8, 6*8, 6*8, 0, 0
 21+  871E 30 30 00 00
 21+  8722 26 87 26 87    DW T_I2, T_I2
 22+  8726 01 04 30 30  T_I2: DB 1, 4, 6*8, 6*8, 6*8, 6*8, 0, 0
 22+  872A 30 30 00 00
 22+  872E 1A 87 1A 87    DW T_I1, T_I1
 23+  8732              ;Tetromino Z
 24+  8732 02 03 38 38  T_Z1: DB 2, 3, 7*8, 7*8, 0, 0, 7*8, 7*8
 24+  8736 00 00 38 38
 24+  873A 3E 87 3E 87    DW T_Z2, T_Z2
 25+  873E 03 02 00 38  T_Z2: DB 3, 2, 0, 7*8, 7*8, 7*8, 7*8, 0
 25+  8742 38 38 38 00
 25+  8746 32 87 32 87    DW T_Z1, T_Z1
 26+  874A              ;Tetromino S
 27+  874A 02 03 00 18  T_S1: DB 2, 3, 0, 3*8, 3*8, 3*8, 3*8, 0
 27+  874E 18 18 18 00
 27+  8752 56 87 56 87    DW T_S2, T_S2
 28+  8756 03 02 18 00  T_S2: DB 3, 2, 3*8, 0, 3*8, 3*8, 0, 3*8
 28+  875A 18 18 00 18
 28+  875E 4A 87 56 87    DW T_S1, T_S2
 29+  8762
 30+  8762 00 01 02 03  row_coords: DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
 30+  8766 04 05 06 07
 30+  876A 08 09 0A 0B
 30+  876E 0C 0D 0E 0F
 30+  8772 10 11 12 13
 30+  8776 14 15 16
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
 19   8779                  INCLUDE Tetris_3D.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
  1+  8779 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  877D 85 9D 81 FF
  2+  8781
  3+  8781              Tetris_3D:
  4+  8781 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  8783 DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  8787
  7+  8787              T3D3:
  8+  8787
  9+  8787 FD 21 79 87      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  878B
 11+  878B 0E 08            LD C,8              ; 8 bytes del patrón
 12+  878D              T3D2:
 13+  878D 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  878F FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  8792              T3D1:
 16+  8792 DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  8795 DD 23            INC IX              ; Siguientes 8 pixels
 18+  8797 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  8799
 20+  8799 0D               DEC C               ; Fin del 2º Bucle
 21+  879A FD 23            inc IY              ; Siguiente byte del patrón
 22+  879C 20 EF            JR NZ,T3D2
 23+  879E
 24+  879E 15               DEC D               ; Fin del 3º bucle
 25+  879F 20 E6            JR NZ, T3D3
 26+  87A1
 27+  87A1 C9               RET
 28+  87A2
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
