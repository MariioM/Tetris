# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificacion para el emulador           ;
  2   0000                  ORG $8000 ;Programa empieza en $8000                           ;
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0                                 ;
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD 79 81         CALL STARTSCREEN
  7   8006              gameInit:
  8   8006 CD 3F 80         CALL MAINGAME
  9   8009              gameEnd:
 10   8009 CD 0E 80         CALL ENDSCREEN
 11   800C
 12   800C 18 FE        mainEnd: JR mainEnd
 13   800E              ;-------------------------------------------------------------------
 14   800E                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800E              ENDSCREEN:
  2+  800E CD 8D 82         CALL CLEARSCR
  3+  8011              ;--------------------------------------------------
  4+  8011              ;Imprime el GAME OVER
  5+  8011 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8013 06 0A            LD B,10    ; Coordenada de la fila
  7+  8015 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8017 DD 21 1F 80      LD IX, GameOverText   ; Se añade el título
  9+  801B CD 1C 82         CALL PRINTAT
 10+  801E C9               RET
 11+  801F
 12+  801F
 13+  801F
 14+  801F
 15+  801F              ;---------------------------------------------------------
 16+  801F 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8023 20 4F 56 45
 16+  8027 52 00
 17+  8029 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802D 61 20 6A 75
 17+  8031 67 61 72 20
 17+  8035 64 65 20 6E
 17+  8039 75 65 76 6F
 17+  803D 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 15   803F                  INCLUDE game.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
  1+  803F              MAINGAME:                                 ;
  2+  803F CD 8D 82         CALL CLEARSCR                         ;                                        ;
  3+  8042              ;------------------------------------------
  4+  8042 CD 50 80         CALL CREATEBOARD
  5+  8045 CD 58 81         CALL RANDOMTETRO
  6+  8048 CD A4 80         CALL DRAWTETRO
  7+  804B CD E4 80         CALL TETRODOWN
  8+  804E
  9+  804E 18 FE        fin: JR fin
 10+  8050              ;-----------------------------------------
 11+  8050                  INCLUDE create-board.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
  1++ 8050              CREATEBOARD:                                 ;
  2++ 8050 CD 8D 82         CALL CLEARSCR                         ;
  3++ 8053              ANCHO EQU 14                              ;
  4++ 8053              LARGO EQU 22                              ;
  5++ 8053              ;------------------------------------------
  6++ 8053 CD 9D 86         CALL Tetris_3D
  7++ 8056 3E 20            LD A, 32
  8++ 8058 D6 02            SUB 2
  9++ 805A D6 0E            SUB ANCHO
 10++ 805C CB 3F            SRL A
 11++ 805E 4F               LD C, A
 12++ 805F 3E 00            LD A, 0
 13++ 8061 C6 1F            ADD (32 - 1)
 14++ 8063 47               LD B, A
 15++ 8064 21 00 58         LD HL, $5800
 16++ 8067              bucle1:
 17++ 8067 23               INC HL
 18++ 8068 10 FD            DJNZ bucle1
 19++ 806A 06 16            LD B, LARGO
 20++ 806C              bucle:
 21++ 806C C5               PUSH BC
 22++ 806D 41               LD B, C
 23++ 806E              marco_izq:
 24++ 806E 23               INC HL
 25++ 806F 10 FD            DJNZ marco_izq
 26++ 8071 C5               PUSH BC
 27++ 8072              margenizq:
 28++ 8072 23               INC HL
 29++ 8073 0E 07            LD C, 7
 30++ 8075 79               LD A, C
 31++ 8076 87               ADD A
 32++ 8077 87               ADD A
 33++ 8078 87               ADD A
 34++ 8079 77               LD (HL), A
 35++ 807A 3E 00            LD A, 0
 36++ 807C 06 0E            LD B, ANCHO
 37++ 807E 80               ADD B
 38++ 807F 47               LD B, A
 39++ 8080              comienzo_ancho:
 40++ 8080 23               INC HL
 41++ 8081 10 FD            DJNZ comienzo_ancho
 42++ 8083              margendrcho:
 43++ 8083 23               INC HL
 44++ 8084 0E 07            LD C,7
 45++ 8086 79               LD A, C
 46++ 8087 87               ADD A
 47++ 8088 87               ADD A
 48++ 8089 87               ADD A
 49++ 808A 77               ld (HL), A
 50++ 808B
 51++ 808B C1               POP BC
 52++ 808C 41               LD B, C
 53++ 808D              marco_drcho
 54++ 808D 23               INC HL
 55++ 808E 10 FD            DJNZ marco_drcho
 56++ 8090 C1               POP BC
 57++ 8091 10 D9            DJNZ bucle
 58++ 8093
 59++ 8093 41               LD B, C
 60++ 8094              marco_izq_fila_ult:
 61++ 8094 23               INC HL
 62++ 8095 10 FD            DJNZ marco_izq_fila_ult
 63++ 8097              fila_ultima:
 64++ 8097 06 10            LD B, ANCHO + 2
 65++ 8099              bucle2:
 66++ 8099 23               INC HL
 67++ 809A 0E 07            LD C,7
 68++ 809C 79               LD A, C
 69++ 809D 87               ADD A
 70++ 809E 87               ADD A
 71++ 809F 87               ADD A
 72++ 80A0 77               ld (HL), A
 73++ 80A1 10 F6            DJNZ bucle2
 74++ 80A3
 75++ 80A3 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
 12+  80A4                  INCLUDE draw-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
  1++ 80A4              DRAWTETRO:
  2++ 80A4              ;---------------------------------------------
  3++ 80A4 DD 7E 00         LD A, (IX)
  4++ 80A7 57               LD D, A
  5++ 80A8 DD 23            INC IX
  6++ 80AA DD 7E 00         LD A, (IX)
  7++ 80AD 5F               LD E, A
  8++ 80AE 42               LD B, D
  9++ 80AF              drawfilas:
 10++ 80AF C5               PUSH BC
 11++ 80B0 43               LD B, E
 12++ 80B1              drawcolumnas:
 13++ 80B1 50               LD D, B
 14++ 80B2 DD 23            INC IX
 15++ 80B4 DD 7E 00         LD A, (IX)
 16++ 80B7 C1               POP BC
 17++ 80B8 4A               LD C, D
 18++ 80B9 CD C4 80         CALL DRAWPIXEL
 19++ 80BC C5               PUSH BC
 20++ 80BD 42               LD B, D
 21++ 80BE 10 F1            DJNZ drawcolumnas
 22++ 80C0 C1               POP BC
 23++ 80C1 10 EC            DJNZ drawfilas
 24++ 80C3
 25++ 80C3 C9               RET
 26++ 80C4              ;------------------------------------------
 27++ 80C4                  INCLUDE draw-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
  1+++80C4              DRAWPIXEL:
  2+++80C4 F5               PUSH AF
  3+++80C5 D5               PUSH DE
  4+++80C6 F5               PUSH AF
  5+++80C7 C5               PUSH BC
  6+++80C8              ;------------------------------------------------------
  7+++80C8 78               LD A, B
  8+++80C9 47               LD B, A
  9+++80CA 68               LD L, B
 10+++80CB 26 00            LD H, 0 ; HL = B
 11+++80CD
 12+++80CD 29               ADD HL, HL
 13+++80CE 29               ADD HL, HL
 14+++80CF 29               ADD HL, HL
 15+++80D0 29               ADD HL, HL
 16+++80D1 29               ADD HL, HL; HL = HL *32
 17+++80D2 79               LD A, C
 18+++80D3 C6 0E            ADD 14
 19+++80D5 4F               LD C, A
 20+++80D6 59               LD E, C
 21+++80D7 16 00            LD D, 0 ; DE = C
 22+++80D9 19               ADD HL, DE
 23+++80DA 11 00 58         LD DE, $5800
 24+++80DD 19               ADD HL, DE ; HL = Y*32 + X + $5800
 25+++80DE C1               POP BC
 26+++80DF F1               POP AF
 27+++80E0 77               LD (HL), A
 28+++80E1 D1               POP DE
 29+++80E2 F1               POP AF
 30+++80E3 C9               RET
 31+++80E4              ;------------------------------------------------
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
 13+  80E4                  INCLUDE tetro-down.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
  1++ 80E4              TETRODOWN:
  2++ 80E4              ;-----------------------------------------
  3++ 80E4 FD 21 84 86      LD IY, row_coords
  4++ 80E8 06 16            LD B, 22
  5++ 80EA              down:
  6++ 80EA C5               PUSH BC
  7++ 80EB CD A4 80         CALL DRAWTETRO
  8++ 80EE CD 51 81         CALL LASTPOSITION
  9++ 80F1 FD 23            INC IY
 10++ 80F3 FE 64            CP 100
 11++ 80F5 28 0D            JR Z, downend
 12++ 80F7 FD 2B            DEC IY
 13++ 80F9 CD 06 81         CALL TETRODEL
 14++ 80FC FD 23            INC IY
 15++ 80FE CD 51 81         CALL LASTPOSITION
 16++ 8101 C1               POP BC
 17++ 8102 10 E6            DJNZ down
 18++ 8104              downend:
 19++ 8104 C1               POP BC
 20++ 8105 C9               RET
 21++ 8106              ;----------------------------------------------------
 22++ 8106                  INCLUDE del-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
  1+++8106              TETRODEL:
  2+++8106              ;------------------------------------------------------
  3+++8106 DD 7E 00         LD A, (IX)
  4+++8109 57               LD D, A
  5+++810A DD 23            INC IX
  6+++810C DD 7E 00         LD A, (IX)
  7+++810F 5F               LD E, A
  8+++8110 42               LD B, D
  9+++8111              rowdel:
 10+++8111 C5               PUSH BC
 11+++8112 43               LD B, E
 12+++8113              columndel:
 13+++8113 50               LD D, B
 14+++8114 DD 23            INC IX
 15+++8116 3E 00            LD A, 0
 16+++8118 C1               POP BC
 17+++8119 4A               LD C, D
 18+++811A CD 25 81         CALL DELPIXEL
 19+++811D C5               PUSH BC
 20+++811E 42               LD B, D
 21+++811F 10 F2            DJNZ columndel
 22+++8121 C1               POP BC
 23+++8122 10 ED            DJNZ rowdel
 24+++8124
 25+++8124 C9               RET
 26+++8125              ;-----------------------------------------
 27+++8125                  INCLUDE del-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
  1+++8125              DELPIXEL:
  2+++8125              ;--------------------------------------------------
  3+++8125 F5               PUSH AF
  4+++8126 D5               PUSH DE
  5+++8127 F5               PUSH AF
  6+++8128 C5               PUSH BC
  7+++8129
  8+++8129 68               LD L, B
  9+++812A 7D               LD A, L
 10+++812B FD 86 00         ADD (IY)
 11+++812E C6 05            ADD 5 ;El tope supeior empieza en la fila 5
 12+++8130 6F               LD L, A
 13+++8131 26 00            LD H, 0 ; HL = B
 14+++8133 32 73 81         LD  (GameY), A
 15+++8136 29               ADD HL, HL
 16+++8137 29               ADD HL, HL
 17+++8138 29               ADD HL, HL
 18+++8139 29               ADD HL, HL
 19+++813A 29               ADD HL, HL; HL = HL *32
 20+++813B 79               LD A, C
 21+++813C C6 0D            ADD 13
 22+++813E 4F               LD C, A
 23+++813F 32 72 81         LD (GameX), A
 24+++8142 59               LD E, C
 25+++8143 16 00            LD D, 0 ; DE = C
 26+++8145 19               ADD HL, DE
 27+++8146 11 00 58         LD DE, $5800
 28+++8149 19               ADD HL, DE ; HL = Y*32 + X + $5800
 29+++814A C1               POP BC
 30+++814B F1               POP AF
 31+++814C 36 00            LD (HL), 0
 32+++814E D1               POP DE
 33+++814F F1               POP AF
 34+++8150 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
 23++ 8151                  INCLUDE last-position.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
  1+++8151              LASTPOSITION:
  2+++8151              ;---------------------------
  3+++8151 06 07            LD B, 7
  4+++8153              return:
  5+++8153 DD 2B            DEC IX
  6+++8155 10 FC            DJNZ return
  7+++8157
  8+++8157 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
 24++ 8158                  INCLUDE tetro-random.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
  1+++8158              RANDOMTETRO:
  2+++8158 ED 5F            LD A, R
  3+++815A E6 1F            AND 31
  4+++815C FE 13            CP 19
  5+++815E 38 02            JR C, continue
  6+++8160 D6 13            SUB 19
  7+++8162              continue:
  8+++8162 DD 21 A0 85      LD IX, T_O
  9+++8166 11 0C 00         LD DE, ANCHOTETRO
 10+++8169 B7               OR A
 11+++816A 28 05            JR Z, randomend
 12+++816C              more:
 13+++816C DD 19            ADD IX, DE
 14+++816E 3D               DEC A
 15+++816F 20 FB            JR NZ, more
 16+++8171
 17+++8171              randomend:
 18+++8171 C9               RET
 19+++8172              ;-------------------------------
 20+++8172              ANCHOTETRO EQU T_L1 - T_O
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
 14+  8172                  INCLUDE position-coords.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
  1++ 8172              gamestatusstruct:
  2++ 8172              ;--------------------
  3++ 8172
  4++ 8172 00           GameX: DB 0
  5++ 8173 00           GameY: DB 0
  6++ 8174 00 00        TetroPtr: DW 0
  7++ 8176 00 00        DownCounter: DW 0
  8++ 8178 00           UndoKey: DB 0
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
 16   8179                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  8179
  2+  8179              STARTSCREEN:                                   ;
  3+  8179 CD 8D 82         CALL CLEARSCR                              ;
  4+  817C CD 7F 81         CALL startInit                             ;
  5+  817F              ;-----------------------------------------------
  6+  817F              startInit:
  7+  817F              ;Imprimir título
  8+  817F 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  8181 06 03            LD B,3     ; Coordenada de la fila
 10+  8183 0E 08            LD C,8     ; Coordenada de la columna
 11+  8185 DD 21 DE 81      LD IX,StartTitle    ; Se añade el título
 12+  8189 CD 1C 82         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  818C
 14+  818C              ;Imprimir pregunta
 15+  818C
 16+  818C 3E 04            LD A,4  ; Se da formato de color al texto
 17+  818E 06 0E            LD B,14 ; Coordenada de la fila
 18+  8190 0E 02            LD C,2  ; Coordenada de la columna
 19+  8192 DD 21 F0 81      LD IX,StartQuestion ; Se añade la pregunta
 20+  8196 CD 1C 82         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  8199
 22+  8199 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  819B 0E 1C            LD C,28 ; y 28(Columna)
 24+  819D CD A6 81         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  81A0 3E 84            LD A,4+$80  ; Se le da el formato
 26+  81A2 77               LD (HL),A   ; Se imprime el cursor
 27+  81A3
 28+  81A3 CD C1 81         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  81A6
 30+  81A6
 31+  81A6              ;Función para guardar coordenadas
 32+  81A6              Coor_Atrib:
 33+  81A6 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  81A7 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  81A8 CB 3C            SRL H
 35+  81AA CB 3C          SRL H
 35+  81AC CB 3C          SRL H
 36+  81AE 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  81AF CB 27            SLA A
 37+  81B1 CB 27          SLA A
 37+  81B3 CB 27          SLA A
 37+  81B5 CB 27          SLA A
 37+  81B7 CB 27          SLA a
 38+  81B9 B1               OR c  ; Y C son los bits 0-4 de L
 39+  81BA 6F               LD L,A
 40+  81BB 01 00 58         LD BC, $5800
 41+  81BE 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  81BF F1               POP AF ; Se devuelve el registro AF del stack
 43+  81C0 C9               RET
 44+  81C1
 45+  81C1              ;Rutina que guarda lo que pulsa el usuario
 46+  81C1              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  81C1 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  81C4 ED 78            IN A,(C)
 49+  81C6 CB 5F            BIT 3,A
 50+  81C8 28 0C            JR Z,T_N            ; Han pulsado N
 51+  81CA 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  81CD ED 78            IN A,(C)
 53+  81CF CB 4F            BIT 1,A
 54+  81D1 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  81D3
 56+  81D3              T_S:
 57+  81D3 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  81D5 C9               RET
 59+  81D6
 60+  81D6              T_N:
 61+  81D6 C9               RET
 62+  81D7
 63+  81D7              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  81D7 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  81D9 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  81DB 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  81DD C9               RET
 68+  81DE
 69+  81DE              ;----------------------------------------------------------------------------
 70+  81DE              ; Carga de ficheros y "variables"
 71+  81DE 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  81E2 4F 4D 45 20
 71+  81E6 54 4F 20 54
 71+  81EA 45 54 52 49
 71+  81EE 53 00
 72+  81F0 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  81F4 69 61 72 20
 72+  81F8 75 6E 61 20
 72+  81FC 70 61 72 74
 72+  8200 69 64 61 3F
 72+  8204 20 28 53 2F
 72+  8208 4E 29 00
 73+  820B 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  820F 63 6F 6E 74
 73+  8213 65 73 74 61
 73+  8217 64 6F 3A 20
 73+  821B 00
 74+  821C
 75+  821C
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 17   821C                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  821C              ; -------------------------------
  2+  821C              ; ZX Spectrum Text print library
  3+  821C              ; Daniel León - AOC - UFV 2020
  4+  821C              ; -------------------------------
  5+  821C
  6+  821C
  7+  821C              ; ----------------------------------------------------------------------------------------
  8+  821C              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  821C              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  821C              ;		IN	B	: Row 0..23
 11+  821C              ;		IN	C	: Column 0..31
 12+  821C              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  821C              ; ----------------------------------------------------------------------------------------
 14+  821C CD 2B 82     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  821F              ; ----------------------------------------------------------------------------------------
 16+  821F              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  821F              ; ----------------------------------------------------------------------------------------
 18+  821F              ; PRINTSTR - Prints String - IX Points to the String start
 19+  821F              ; ----------------------------------------------------------------------------------------
 20+  821F DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  8222 B7           			OR A						; check for end of string (0)
 22+  8223 C8           			RET Z						; Finish printing if 0
 23+  8224 CD 59 82     			CALL PRINTCHNUM
 24+  8227 DD 23        			INC IX						; Move to next char in string
 25+  8229 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  822B              ; ----------------------------------------------------------------------------------------
 27+  822B
 28+  822B
 29+  822B              ;-----------------------------------------------------------------------------------------
 30+  822B              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  822B              ;-----------------------------------------------------------------------------------------
 32+  822B 32 9F 82     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  822E CD 34 82     PREP_PRT_2:	CALL CRtoSCREEN
 34+  8231 C3 46 82     			JP CRtoATTR
 35+  8234              ;-----------------------------------------------------------------------------------------
 36+  8234
 37+  8234              ;-----------------------------------------------------------------------------------------
 38+  8234              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  8234              ;	IN  - B=Row, C=Column
 40+  8234              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  8234              ;	Conversion:
 42+  8234              ;			Row FFfff   Column CCCCC
 43+  8234              ;			HL=%010FF000 fffCCCCC
 44+  8234              ;-----------------------------------------------------------------------------------------
 45+  8234              CRtoSCREEN:
 46+  8234 78           			LD A,B						; %___FFfff
 47+  8235 F6 40        			OR #40						; %010FFfff
 48+  8237 E6 F8        			AND #F8						; %010FF000
 49+  8239 67           			LD H,A
 50+  823A
 51+  823A 78           			LD A,B						; %___FFfff
 52+  823B E6 07        			AND #7						; %00000fff
 53+  823D 0F           			RRCA						; %f00000ff
 54+  823E 0F           			RRCA						; %ff00000f
 55+  823F 0F           			RRCA						; %fff00000
 56+  8240 B1           			OR C						; %fffCCCCC
 57+  8241 6F           			LD L,A
 58+  8242 22 9B 82                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8245 C9                       RET
 60+  8246              ; ----------------------------------------------------------------------------------------
 61+  8246
 62+  8246
 63+  8246
 64+  8246              ;-----------------------------------------------------------------------------------------
 65+  8246              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8246              ;	IN  - B=Row, C=Column
 67+  8246              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8246              ;	Conversion:
 69+  8246              ;			Row FFfff   Column CCCCC
 70+  8246              ;			HL=%010110FF fffCCCCC
 71+  8246              ;-----------------------------------------------------------------------------------------
 72+  8246              CRtoATTR:
 73+  8246 78           			LD A,B						; %___FFfff
 74+  8247 0F           			RRCA						; %f000FFff
 75+  8248 0F           			RRCA						; %ff000FFf
 76+  8249 0F           			RRCA						; %fff000FF
 77+  824A 6F           			LD L,A
 78+  824B E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  824D F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  824F 67           			LD H,A
 81+  8250
 82+  8250 7D           			LD A,L						; %fff000FF
 83+  8251 E6 E0        			AND #E0						; %fff00000
 84+  8253 B1           			OR C						; %fffCCCCC
 85+  8254 6F           			LD L,A
 86+  8255
 87+  8255 22 9D 82                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8258 C9                       RET
 89+  8259              ; ----------------------------------------------------------------------------------------
 90+  8259
 91+  8259
 92+  8259
 93+  8259              ; ----------------------------------------------------------------------------------------
 94+  8259              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8259              ;-----------------------------------------------------------------------------------------
 96+  8259              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8259 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  825B 6F           			LD L,A
 99+  825C 29           			ADD HL,HL
100+  825D 29           			ADD HL,HL
101+  825E 29           			ADD HL,HL
102+  825F 11 A0 81     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8262 19           			ADD HL,DE
104+  8263 EB           			EX  DE,HL					;Value in DE
105+  8264              			; Continues to printchar below
106+  8264              ; ----------------------------------------------------------------------------------------
107+  8264
108+  8264
109+  8264              ; ----------------------------------------------------------------------------------------
110+  8264              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8264              ; ----------------------------------------------------------------------------------------
112+  8264              PRINTCHAR:
113+  8264 06 08        			LD B,8						; 8 Lines per char
114+  8266 2A 9B 82                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8269
116+  8269 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  826A 77           			LD (HL),A					; Move to Printing location
118+  826B 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  826C 13                       INC DE 						; next line to be printed
120+  826D 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  826F 3A 9F 82                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8272 2A 9D 82                 LD HL, (SCR_ATTR_PTR)
123+  8275 77                       LD (HL),A
124+  8276 21 9D 82                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8279 34                       INC (HL)					; Move Attribute cursor to next char
126+  827A 21 9B 82     			LD HL, SCR_CUR_PTR
127+  827D 34           			INC (HL)					; update Cursor pointer to next position
128+  827E C9                       RET
129+  827F              ; ----------------------------------------------------------------------------------------
130+  827F
131+  827F
132+  827F
133+  827F              ; ----------------------------------------------------------------------------------------
134+  827F              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  827F              ; 				Sets bright 1 and flash 0
136+  827F              ; ----------------------------------------------------------------------------------------
137+  827F 3A 9F 82     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8282 E6 07                    AND 7						; get Attr INK in A
139+  8284 07           			RLCA
140+  8285 07           			RLCA
141+  8286 07           			RLCA						; move Ink to Paper
142+  8287 F6 40        			OR 64						; ink 0 bright 1
143+  8289 32 9F 82     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  828C C9           			RET
145+  828D              ; ----------------------------------------------------------------------------------------
146+  828D
147+  828D
148+  828D
149+  828D
150+  828D 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  8290 11 01 40     			LD DE,$4001
152+  8293 01 FF 1A     			LD BC,6911
153+  8296 36 00        			LD (HL),0
154+  8298 ED B0        			LDIR
155+  829A C9           			RET
156+  829B
157+  829B
158+  829B              SCR_CUR_PTR
158+  829B 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  829D 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  829F 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  82A0
162+  82A0              CHARSET: incbin "charset.bin"			; Charset used
163+  85A0
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 18   85A0                  INCLUDE fichas.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
  1+  85A0              TETROMINOS:                            ;
  2+  85A0              ;---------------------------------------
  3+  85A0              ;Tetromino O
  4+  85A0 02 02 30 30  T_O: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  4+  85A4 30 30 00 00
  4+  85A8 A0 85 A0 85    DW T_O, T_O
  5+  85AC              ;Tetromino L
  6+  85AC 03 02 20 00  T_L1: DB 3, 2, 4*8, 0, 4*8, 0, 4*8, 4*8
  6+  85B0 20 00 20 20
  6+  85B4 B8 85 C4 85    DW T_L2, T_L3
  7+  85B8 02 03 00 00  T_L2: DB 2, 3, 0, 0, 4*8, 4*8, 4*8, 4*8
  7+  85BC 20 20 20 20
  7+  85C0 D0 85 AC 85    DW T_L4, T_L1
  8+  85C4 03 02 20 20  T_L3: DB 3, 2, 4*8, 4*8, 4*8, 4*8, 0, 0
  8+  85C8 20 20 00 00
  8+  85CC AC 85 D0 85    DW T_L1, T_L4
  9+  85D0 03 02 20 20  T_L4: DB 3, 2, 4*8, 4*8, 0, 4*8, 0, 4*8
  9+  85D4 00 20 00 20
  9+  85D8 B8 85 C4 85    DW T_L2, T_L3
 10+  85DC              ;Tetromino J
 11+  85DC 03 02 00 10  T_J1: DB 3, 2, 0, 2*8, 0, 2*8, 2*8, 2*8
 11+  85E0 00 10 10 10
 11+  85E4 E8 85 F4 85    DW T_J2, T_J3
 12+  85E8 02 03 10 10  T_J2: DB 2, 3, 2*8, 2*8, 2*8, 0, 0, 2*8
 12+  85EC 10 00 00 10
 12+  85F0 00 86 DC 85    DW T_J4, T_J1
 13+  85F4 02 03 10 00  T_J3: DB 2, 3, 2*8, 0, 0, 2*8, 2*8, 2*8
 13+  85F8 00 10 10 10
 13+  85FC DC 85 00 86    DW T_J1, T_J4
 14+  8600 03 02 10 10  T_J4: DB 3, 2, 2*8, 2*8, 2*8, 0, 2*8, 0
 14+  8604 10 00 10 00
 14+  8608 E8 85 F4 85    DW T_J2, T_J3
 15+  860C              ;Tetromino T
 16+  860C 02 03 28 28  T_T1: DB 2, 3, 5*8, 5*8, 5, 0, 5*8, 0
 16+  8610 05 00 28 00
 16+  8614 18 86 24 86    DW T_T2, T_T3
 17+  8618 03 02 28 00  T_T2: DB 3, 2, 5*8, 0, 5*8, 5*8, 5*8, 0
 17+  861C 28 28 28 00
 17+  8620 30 86 0C 86    DW T_T4, T_T1
 18+  8624 03 02 00 28  T_T3: DB 3, 2, 0, 5*8, 5*8, 5*8, 0, 5*8
 18+  8628 28 28 00 28
 18+  862C 0C 86 30 86    DW T_T1, T_T4
 19+  8630 02 03 00 28  T_T4: DB 2, 3, 0, 5*8, 0, 5*8, 5*8, 5*8
 19+  8634 00 28 28 28
 19+  8638 24 86 18 86    DW T_T3, T_T2
 20+  863C              ;Tetromino I
 21+  863C 04 01 30 30  T_I1: DB 4, 1, 6*8, 6*8, 6*8, 6*8, 0, 0
 21+  8640 30 30 00 00
 21+  8644 48 86 48 86    DW T_I2, T_I2
 22+  8648 01 04 30 30  T_I2: DB 1, 4, 6*8, 6*8, 6*8, 6*8, 0, 0
 22+  864C 30 30 00 00
 22+  8650 3C 86 3C 86    DW T_I1, T_I1
 23+  8654              ;Tetromino Z
 24+  8654 02 03 38 38  T_Z1: DB 2, 3, 7*8, 7*8, 0, 0, 7*8, 7*8
 24+  8658 00 00 38 38
 24+  865C 60 86 60 86    DW T_Z2, T_Z2
 25+  8660 03 02 00 38  T_Z2: DB 3, 2, 0, 7*8, 7*8, 7*8, 7*8, 0
 25+  8664 38 38 38 00
 25+  8668 54 86 54 86    DW T_Z1, T_Z1
 26+  866C              ;Tetromino S
 27+  866C 02 03 00 18  T_S1: DB 2, 3, 0, 3*8, 3*8, 3*8, 3*8, 0
 27+  8670 18 18 18 00
 27+  8674 78 86 78 86    DW T_S2, T_S2
 28+  8678 03 02 18 00  T_S2: DB 3, 2, 3*8, 0, 3*8, 3*8, 0, 3*8
 28+  867C 18 18 00 18
 28+  8680 6C 86 78 86    DW T_S1, T_S2
 29+  8684
 30+  8684 00 01 02 03  row_coords: DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
 30+  8688 04 05 06 07
 30+  868C 08 09 0A 0B
 30+  8690 0C 0D 0E 0F
 30+  8694 10
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
 19   8695                  INCLUDE Tetris_3D.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
  1+  8695 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  8699 85 9D 81 FF
  2+  869D
  3+  869D              Tetris_3D:
  4+  869D 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  869F DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  86A3
  7+  86A3              T3D3:
  8+  86A3
  9+  86A3 FD 21 95 86      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  86A7
 11+  86A7 0E 08            LD C,8              ; 8 bytes del patrón
 12+  86A9              T3D2:
 13+  86A9 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  86AB FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  86AE              T3D1:
 16+  86AE DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  86B1 DD 23            INC IX              ; Siguientes 8 pixels
 18+  86B3 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  86B5
 20+  86B5 0D               DEC C               ; Fin del 2º Bucle
 21+  86B6 FD 23            inc IY              ; Siguiente byte del patrón
 22+  86B8 20 EF            JR NZ,T3D2
 23+  86BA
 24+  86BA 15               DEC D               ; Fin del 3º bucle
 25+  86BB 20 E6            JR NZ, T3D3
 26+  86BD
 27+  86BD C9               RET
 28+  86BE
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
