# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificación para el emulador
  2   0000                  ORG $8000 ;Programa empieza en $8000
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD 3C 80         CALL STARTSCREEN
  7   8006              gameEnd:
  8   8006 CD 0B 80         CALL ENDSCREEN
  9   8009
 10   8009 18 FE        mainEnd: JR mainEnd
 11   800B              ;-------------------------------------------------------------------
 12   800B                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800B              ENDSCREEN:
  2+  800B CD 50 81         CALL CLEARSCR
  3+  800E              ;--------------------------------------------------
  4+  800E              ;Imprime el GAME OVER
  5+  800E 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8010 06 0A            LD B,10    ; Coordenada de la fila
  7+  8012 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8014 DD 21 1C 80      LD IX, GameOverText   ; Se añade el título
  9+  8018 CD DF 80         CALL PRINTAT
 10+  801B C9               RET
 11+  801C
 12+  801C
 13+  801C
 14+  801C
 15+  801C              ;---------------------------------------------------------
 16+  801C 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8020 20 4F 56 45
 16+  8024 52 00
 17+  8026 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802A 61 20 6A 75
 17+  802E 67 61 72 20
 17+  8032 64 65 20 6E
 17+  8036 75 65 76 6F
 17+  803A 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 13   803C                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  803C
  2+  803C              STARTSCREEN:
  3+  803C CD 50 81         CALL CLEARSCR
  4+  803F CD 42 80         CALL startInit
  5+  8042              ;-----------------------------------------------
  6+  8042              startInit:
  7+  8042              ;Imprimir título
  8+  8042 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  8044 06 03            LD B,3     ; Coordenada de la fila
 10+  8046 0E 08            LD C,8     ; Coordenada de la columna
 11+  8048 DD 21 A1 80      LD IX,StartTitle    ; Se añade el título
 12+  804C CD DF 80         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  804F
 14+  804F              ;Imprimir pregunta
 15+  804F
 16+  804F 3E 04            LD A,4  ; Se da formato de color al texto
 17+  8051 06 0E            LD B,14 ; Coordenada de la fila
 18+  8053 0E 02            LD C,2  ; Coordenada de la columna
 19+  8055 DD 21 B3 80      LD IX,StartQuestion ; Se añade la pregunta
 20+  8059 CD DF 80         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  805C
 22+  805C 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  805E 0E 1C            LD C,28 ; y 28(Columna)
 24+  8060 CD 69 80         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  8063 3E 84            LD A,4+$80  ; Se le da el formato
 26+  8065 77               LD (HL),A   ; Se imprime el cursor
 27+  8066
 28+  8066 CD 84 80         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  8069
 30+  8069
 31+  8069              ;Función para guardar coordenadas
 32+  8069              Coor_Atrib:
 33+  8069 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  806A 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  806B CB 3C            SRL H
 35+  806D CB 3C          SRL H
 35+  806F CB 3C          SRL H
 36+  8071 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  8072 CB 27            SLA A
 37+  8074 CB 27          SLA A
 37+  8076 CB 27          SLA A
 37+  8078 CB 27          SLA A
 37+  807A CB 27          SLA a
 38+  807C B1               OR c  ; Y C son los bits 0-4 de L
 39+  807D 6F               LD L,A
 40+  807E 01 00 58         LD BC, $5800
 41+  8081 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  8082 F1               POP AF ; Se devuelve el registro AF del stack
 43+  8083 C9               RET
 44+  8084
 45+  8084              ;Rutina que guarda lo que pulsa el usuario
 46+  8084              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  8084 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  8087 ED 78            IN A,(C)
 49+  8089 CB 5F            BIT 3,A
 50+  808B 28 0C            JR Z,T_N            ; Han pulsado N
 51+  808D 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  8090 ED 78            IN A,(C)
 53+  8092 CB 4F            BIT 1,A
 54+  8094 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  8096
 56+  8096              T_S:
 57+  8096 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  8098 C9               RET
 59+  8099
 60+  8099              T_N:
 61+  8099 C9               RET
 62+  809A
 63+  809A              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  809A ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  809C FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  809E 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  80A0 C9               RET
 68+  80A1
 69+  80A1
 70+  80A1              ; Carga de ficheros y "variables"
 71+  80A1 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  80A5 4F 4D 45 20
 71+  80A9 54 4F 20 54
 71+  80AD 45 54 52 49
 71+  80B1 53 00
 72+  80B3 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  80B7 69 61 72 20
 72+  80BB 75 6E 61 20
 72+  80BF 70 61 72 74
 72+  80C3 69 64 61 3F
 72+  80C7 20 28 53 2F
 72+  80CB 4E 29 00
 73+  80CE 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  80D2 63 6F 6E 74
 73+  80D6 65 73 74 61
 73+  80DA 64 6F 3A 20
 73+  80DE 00
 74+  80DF
 75+  80DF
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 14   80DF                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  80DF              ; -------------------------------
  2+  80DF              ; ZX Spectrum Text print library
  3+  80DF              ; Daniel León - AOC - UFV 2020
  4+  80DF              ; -------------------------------
  5+  80DF
  6+  80DF
  7+  80DF              ; ----------------------------------------------------------------------------------------
  8+  80DF              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  80DF              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  80DF              ;		IN	B	: Row 0..23
 11+  80DF              ;		IN	C	: Column 0..31
 12+  80DF              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  80DF              ; ----------------------------------------------------------------------------------------
 14+  80DF CD EE 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  80E2              ; ----------------------------------------------------------------------------------------
 16+  80E2              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  80E2              ; ----------------------------------------------------------------------------------------
 18+  80E2              ; PRINTSTR - Prints String - IX Points to the String start
 19+  80E2              ; ----------------------------------------------------------------------------------------
 20+  80E2 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  80E5 B7           			OR A						; check for end of string (0)
 22+  80E6 C8           			RET Z						; Finish printing if 0
 23+  80E7 CD 1C 81     			CALL PRINTCHNUM
 24+  80EA DD 23        			INC IX						; Move to next char in string
 25+  80EC 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  80EE              ; ----------------------------------------------------------------------------------------
 27+  80EE
 28+  80EE
 29+  80EE              ;-----------------------------------------------------------------------------------------
 30+  80EE              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  80EE              ;-----------------------------------------------------------------------------------------
 32+  80EE 32 62 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  80F1 CD F7 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  80F4 C3 09 81     			JP CRtoATTR
 35+  80F7              ;-----------------------------------------------------------------------------------------
 36+  80F7
 37+  80F7              ;-----------------------------------------------------------------------------------------
 38+  80F7              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  80F7              ;	IN  - B=Row, C=Column
 40+  80F7              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  80F7              ;	Conversion:
 42+  80F7              ;			Row FFfff   Column CCCCC
 43+  80F7              ;			HL=%010FF000 fffCCCCC
 44+  80F7              ;-----------------------------------------------------------------------------------------
 45+  80F7              CRtoSCREEN:
 46+  80F7 78           			LD A,B						; %___FFfff
 47+  80F8 F6 40        			OR #40						; %010FFfff
 48+  80FA E6 F8        			AND #F8						; %010FF000
 49+  80FC 67           			LD H,A
 50+  80FD
 51+  80FD 78           			LD A,B						; %___FFfff
 52+  80FE E6 07        			AND #7						; %00000fff
 53+  8100 0F           			RRCA						; %f00000ff
 54+  8101 0F           			RRCA						; %ff00000f
 55+  8102 0F           			RRCA						; %fff00000
 56+  8103 B1           			OR C						; %fffCCCCC
 57+  8104 6F           			LD L,A
 58+  8105 22 5E 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8108 C9                       RET
 60+  8109              ; ----------------------------------------------------------------------------------------
 61+  8109
 62+  8109
 63+  8109
 64+  8109              ;-----------------------------------------------------------------------------------------
 65+  8109              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8109              ;	IN  - B=Row, C=Column
 67+  8109              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8109              ;	Conversion:
 69+  8109              ;			Row FFfff   Column CCCCC
 70+  8109              ;			HL=%010110FF fffCCCCC
 71+  8109              ;-----------------------------------------------------------------------------------------
 72+  8109              CRtoATTR:
 73+  8109 78           			LD A,B						; %___FFfff
 74+  810A 0F           			RRCA						; %f000FFff
 75+  810B 0F           			RRCA						; %ff000FFf
 76+  810C 0F           			RRCA						; %fff000FF
 77+  810D 6F           			LD L,A
 78+  810E E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  8110 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  8112 67           			LD H,A
 81+  8113
 82+  8113 7D           			LD A,L						; %fff000FF
 83+  8114 E6 E0        			AND #E0						; %fff00000
 84+  8116 B1           			OR C						; %fffCCCCC
 85+  8117 6F           			LD L,A
 86+  8118
 87+  8118 22 60 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  811B C9                       RET
 89+  811C              ; ----------------------------------------------------------------------------------------
 90+  811C
 91+  811C
 92+  811C
 93+  811C              ; ----------------------------------------------------------------------------------------
 94+  811C              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  811C              ;-----------------------------------------------------------------------------------------
 96+  811C              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  811C 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  811E 6F           			LD L,A
 99+  811F 29           			ADD HL,HL
100+  8120 29           			ADD HL,HL
101+  8121 29           			ADD HL,HL
102+  8122 11 63 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8125 19           			ADD HL,DE
104+  8126 EB           			EX  DE,HL					;Value in DE
105+  8127              			; Continues to printchar below
106+  8127              ; ----------------------------------------------------------------------------------------
107+  8127
108+  8127
109+  8127              ; ----------------------------------------------------------------------------------------
110+  8127              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8127              ; ----------------------------------------------------------------------------------------
112+  8127              PRINTCHAR:
113+  8127 06 08        			LD B,8						; 8 Lines per char
114+  8129 2A 5E 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  812C
116+  812C 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  812D 77           			LD (HL),A					; Move to Printing location
118+  812E 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  812F 13                       INC DE 						; next line to be printed
120+  8130 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  8132 3A 62 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8135 2A 60 81                 LD HL, (SCR_ATTR_PTR)
123+  8138 77                       LD (HL),A
124+  8139 21 60 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  813C 34                       INC (HL)					; Move Attribute cursor to next char
126+  813D 21 5E 81     			LD HL, SCR_CUR_PTR
127+  8140 34           			INC (HL)					; update Cursor pointer to next position
128+  8141 C9                       RET
129+  8142              ; ----------------------------------------------------------------------------------------
130+  8142
131+  8142
132+  8142
133+  8142              ; ----------------------------------------------------------------------------------------
134+  8142              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  8142              ; 				Sets bright 1 and flash 0
136+  8142              ; ----------------------------------------------------------------------------------------
137+  8142 3A 62 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8145 E6 07                    AND 7						; get Attr INK in A
139+  8147 07           			RLCA
140+  8148 07           			RLCA
141+  8149 07           			RLCA						; move Ink to Paper
142+  814A F6 40        			OR 64						; ink 0 bright 1
143+  814C 32 62 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  814F C9           			RET
145+  8150              ; ----------------------------------------------------------------------------------------
146+  8150
147+  8150
148+  8150
149+  8150
150+  8150 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  8153 11 01 40     			LD DE,$4001
152+  8156 01 FF 1A     			LD BC,6911
153+  8159 36 00        			LD (HL),0
154+  815B ED B0        			LDIR
155+  815D C9           			RET
156+  815E
157+  815E
158+  815E              SCR_CUR_PTR
158+  815E 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  8160 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  8162 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  8163
162+  8163              CHARSET: incbin "charset.bin"			; Charset used
163+  8463
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 15   8463
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
