# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificacion para el emulador           ;
  2   0000                  ORG $8000 ;Programa empieza en $8000                           ;
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0                                 ;
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD 85 82         CALL STARTSCREEN ;Se llama a la pantalla de inicio
  7   8006              gameInit:
  8   8006 CD 3F 80         CALL MAINGAME ;Se llama al juego
  9   8009              gameEnd:
 10   8009 CD 0E 80         CALL ENDSCREEN ;Se llama a la pantalla final
 11   800C
 12   800C 18 FE        mainEnd: JR mainEnd ;Se queda en un bucle infinito
 13   800E              ;-------------------------------------------------------------------
 14   800E                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800E              ENDSCREEN:
  2+  800E CD 99 83         CALL CLEARSCR
  3+  8011              ;--------------------------------------------------
  4+  8011              ;Imprime el GAME OVER
  5+  8011 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8013 06 0A            LD B,10    ; Coordenada de la fila
  7+  8015 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8017 DD 21 1F 80      LD IX, GameOverText   ; Se añade el título
  9+  801B CD 28 83         CALL PRINTAT
 10+  801E C9               RET
 11+  801F
 12+  801F
 13+  801F
 14+  801F
 15+  801F              ;---------------------------------------------------------
 16+  801F 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8023 20 4F 56 45
 16+  8027 52 00
 17+  8029 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802D 61 20 6A 75
 17+  8031 67 61 72 20
 17+  8035 64 65 20 6E
 17+  8039 75 65 76 6F
 17+  803D 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 15   803F                  INCLUDE game.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
  1+  803F              MAINGAME:                                 ;
  2+  803F CD 99 83         CALL CLEARSCR  ;Limpia la pantalla    ;
  3+  8042              ;------------------------------------------
  4+  8042 CD 52 80         CALL CREATEBOARD ; Crea el tablero
  5+  8045              gameflow:
  6+  8045 CD 9C 81         CALL RANDOMTETRO ; Geneta un tetromino aleatorio
  7+  8048 CD F8 80         CALL TETRODOWN ; Llama a la funcion que dibuja y mueve el tetromino hacia abajo
  8+  804B FE FE            CP 254 ;Comprueba el gaemover
  9+  804D 20 F6            JR NZ, gameflow ;Si no es gameover, sigue el juego
 10+  804F C9               RET ; Si es gameover, sale del juego
 11+  8050
 12+  8050 18 FE        fin: JR fin
 13+  8052              ;-----------------------------------------
 14+  8052                  INCLUDE create-board.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
  1++ 8052              CREATEBOARD:                                 ;
  2++ 8052 CD 99 83         CALL CLEARSCR                         ;
  3++ 8055              ANCHO EQU 14                              ;
  4++ 8055              LARGO EQU 22                              ;
  5++ 8055              ;------------------------------------------
  6++ 8055 CD AF 87         CALL Tetris_3D
  7++ 8058 3E 20            LD A, 32
  8++ 805A D6 02            SUB 2
  9++ 805C D6 0E            SUB ANCHO
 10++ 805E CB 3F            SRL A
 11++ 8060 4F               LD C, A
 12++ 8061 3E 00            LD A, 0
 13++ 8063 C6 1F            ADD (32 - 1)
 14++ 8065 47               LD B, A
 15++ 8066 21 00 58         LD HL, $5800
 16++ 8069              bucle1:
 17++ 8069 23               INC HL
 18++ 806A 10 FD            DJNZ bucle1
 19++ 806C 06 16            LD B, LARGO
 20++ 806E              bucle:
 21++ 806E C5               PUSH BC
 22++ 806F 41               LD B, C
 23++ 8070              marco_izq:
 24++ 8070 23               INC HL
 25++ 8071 10 FD            DJNZ marco_izq
 26++ 8073 C5               PUSH BC
 27++ 8074              margenizq:
 28++ 8074 23               INC HL
 29++ 8075 0E 07            LD C, 7
 30++ 8077 79               LD A, C
 31++ 8078 87               ADD A
 32++ 8079 87               ADD A
 33++ 807A 87               ADD A
 34++ 807B 77               LD (HL), A
 35++ 807C 3E 00            LD A, 0
 36++ 807E 06 0E            LD B, ANCHO
 37++ 8080 80               ADD B
 38++ 8081 47               LD B, A
 39++ 8082              comienzo_ancho:
 40++ 8082 23               INC HL
 41++ 8083 10 FD            DJNZ comienzo_ancho
 42++ 8085              margendrcho:
 43++ 8085 23               INC HL
 44++ 8086 0E 07            LD C,7
 45++ 8088 79               LD A, C
 46++ 8089 87               ADD A
 47++ 808A 87               ADD A
 48++ 808B 87               ADD A
 49++ 808C 77               ld (HL), A
 50++ 808D
 51++ 808D C1               POP BC
 52++ 808E 41               LD B, C
 53++ 808F              marco_drcho
 54++ 808F 23               INC HL
 55++ 8090 10 FD            DJNZ marco_drcho
 56++ 8092 C1               POP BC
 57++ 8093 10 D9            DJNZ bucle
 58++ 8095
 59++ 8095 41               LD B, C
 60++ 8096              marco_izq_fila_ult:
 61++ 8096 23               INC HL
 62++ 8097 10 FD            DJNZ marco_izq_fila_ult
 63++ 8099              fila_ultima:
 64++ 8099 06 10            LD B, ANCHO + 2
 65++ 809B              bucle2:
 66++ 809B 23               INC HL
 67++ 809C 0E 07            LD C,7
 68++ 809E 79               LD A, C
 69++ 809F 87               ADD A
 70++ 80A0 87               ADD A
 71++ 80A1 87               ADD A
 72++ 80A2 77               ld (HL), A
 73++ 80A3 10 F6            DJNZ bucle2
 74++ 80A5
 75++ 80A5 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
 15+  80A6                  INCLUDE draw-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
  1++ 80A6              DRAWTETRO:
  2++ 80A6              ;---------------------------------------------
  3++ 80A6 DD 7E 00         LD A, (IX)
  4++ 80A9 57               LD D, A
  5++ 80AA DD 23            INC IX
  6++ 80AC 3A C9 81         LD A, (IXCounter)
  7++ 80AF 3C               INC A
  8++ 80B0 32 C9 81         LD (IXCounter), A
  9++ 80B3 DD 7E 00         LD A, (IX)
 10++ 80B6 5F               LD E, A
 11++ 80B7 42               LD B, D
 12++ 80B8              drawfilas:
 13++ 80B8 C5               PUSH BC
 14++ 80B9 43               LD B, E
 15++ 80BA              drawcolumnas:
 16++ 80BA 50               LD D, B
 17++ 80BB DD 23            INC IX
 18++ 80BD 3A C9 81         LD A, (IXCounter)
 19++ 80C0 3C               INC A
 20++ 80C1 32 C9 81         LD (IXCounter), A
 21++ 80C4 DD 7E 00         LD A, (IX)
 22++ 80C7 C1               POP BC
 23++ 80C8 4A               LD C, D
 24++ 80C9 CD D4 80         CALL DRAWPIXEL
 25++ 80CC C5               PUSH BC
 26++ 80CD 42               LD B, D
 27++ 80CE 10 EA            DJNZ drawcolumnas
 28++ 80D0 C1               POP BC
 29++ 80D1 10 E5            DJNZ drawfilas
 30++ 80D3
 31++ 80D3 C9               RET
 32++ 80D4              ;------------------------------------------
 33++ 80D4                  INCLUDE draw-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
  1+++80D4              DRAWPIXEL:
  2+++80D4 F5               PUSH AF
  3+++80D5 D5               PUSH DE
  4+++80D6 F5               PUSH AF
  5+++80D7 C5               PUSH BC
  6+++80D8              ;------------------------------------------------------
  7+++80D8 78               LD A, B
  8+++80D9 FD 86 00         ADD (IY)
  9+++80DC 47               LD B, A
 10+++80DD 68               LD L, B
 11+++80DE 26 00            LD H, 0 ; HL = B
 12+++80E0
 13+++80E0 29               ADD HL, HL
 14+++80E1 29               ADD HL, HL
 15+++80E2 29               ADD HL, HL
 16+++80E3 29               ADD HL, HL
 17+++80E4 29               ADD HL, HL; HL = HL *32
 18+++80E5 3A CB 81         LD A, (Middle)
 19+++80E8 81               ADD C
 20+++80E9 4F               LD C, A
 21+++80EA 59               LD E, C
 22+++80EB 16 00            LD D, 0 ; DE = C
 23+++80ED 19               ADD HL, DE
 24+++80EE 11 00 58         LD DE, $5800
 25+++80F1 19               ADD HL, DE ; HL = Y*32 + X + $5800
 26+++80F2 C1               POP BC
 27+++80F3 F1               POP AF
 28+++80F4 77               LD (HL), A
 29+++80F5 D1               POP DE
 30+++80F6 F1               POP AF
 31+++80F7 C9               RET
 32+++80F8              ;------------------------------------------------
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
 16+  80F8                  INCLUDE tetro-down.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
  1++ 80F8              TETRODOWN:
  2++ 80F8              ;-----------------------------------------
  3++ 80F8 FD 21 90 87      LD IY, row_coords
  4++ 80FC CD CC 81         CALL CHECKCOLISION
  5++ 80FF FE 64            CP 100
  6++ 8101 28 34            JR Z, goGameOver
  7++ 8103 CD 8E 81         CALL LASTPOSITION
  8++ 8106
  9++ 8106              down:
 10++ 8106 C5               PUSH BC
 11++ 8107 CD A6 80         CALL DRAWTETRO
 12++ 810A CD 8E 81         CALL LASTPOSITION
 13++ 810D CD 3C 81         CALL TETRODEL
 14++ 8110 CD 8E 81         CALL LASTPOSITION
 15++ 8113 CD 5B 82         CALL TETROMOVE
 16++ 8116                  ;CALL TURNTETRO
 17++ 8116 FD 23            INC IY
 18++ 8118 CD CC 81         CALL CHECKCOLISION
 19++ 811B FE 64            CP 100
 20++ 811D 28 08            JR Z, nexttetro
 21++ 811F 20 00            JR NZ, downcontinue
 22++ 8121              downcontinue:
 23++ 8121 CD 8E 81         CALL LASTPOSITION
 24++ 8124 C1               POP BC
 25++ 8125 18 DF            JR down
 26++ 8127              nexttetro:
 27++ 8127 CD 8E 81         CALL LASTPOSITION
 28++ 812A C1               POP BC
 29++ 812B FD 2B            DEC IY
 30++ 812D CD A6 80         CALL DRAWTETRO
 31++ 8130 CD 8E 81         CALL LASTPOSITION
 32++ 8133 CD B6 81         CALL RETURNIY
 33++ 8136 C9               RET
 34++ 8137              goGameOver:
 35++ 8137 C1               POP BC
 36++ 8138 3E FE            LD A, 254
 37++ 813A C9               RET
 38++ 813B              gamecontinue:
 39++ 813B C9               RET
 40++ 813C              ;----------------------------------------------------
 41++ 813C                  INCLUDE del-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
  1+++813C              TETRODEL:
  2+++813C              ;------------------------------------------------------
  3+++813C DD 7E 00         LD A, (IX)
  4+++813F 57               LD D, A
  5+++8140 DD 23            INC IX
  6+++8142 3A C9 81         LD A, (IXCounter)
  7+++8145 3C               INC A
  8+++8146 32 C9 81         LD (IXCounter), A
  9+++8149 DD 7E 00         LD A, (IX)
 10+++814C 5F               LD E, A
 11+++814D 42               LD B, D
 12+++814E              rowdel:
 13+++814E C5               PUSH BC
 14+++814F 43               LD B, E
 15+++8150              columndel:
 16+++8150 50               LD D, B
 17+++8151 DD 23            INC IX
 18+++8153 3A C9 81         LD A, (IXCounter)
 19+++8156 3C               INC A
 20+++8157 32 C9 81         LD (IXCounter), A
 21+++815A 3E 00            LD A, 0
 22+++815C C1               POP BC
 23+++815D 4A               LD C, D
 24+++815E CD 69 81         CALL DELPIXEL
 25+++8161 C5               PUSH BC
 26+++8162 42               LD B, D
 27+++8163 10 EB            DJNZ columndel
 28+++8165 C1               POP BC
 29+++8166 10 E6            DJNZ rowdel
 30+++8168
 31+++8168 C9               RET
 32+++8169              ;-----------------------------------------
 33+++8169                  INCLUDE del-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
  1+++8169              DELPIXEL:
  2+++8169              ;--------------------------------------------------
  3+++8169 F5               PUSH AF
  4+++816A D5               PUSH DE
  5+++816B F5               PUSH AF
  6+++816C C5               PUSH BC
  7+++816D
  8+++816D 78               LD A, B
  9+++816E FD 86 00         ADD (IY)
 10+++8171 47               LD B, A
 11+++8172 68               LD L, B
 12+++8173 26 00            LD H, 0 ; HL = B
 13+++8175
 14+++8175 29               ADD HL, HL
 15+++8176 29               ADD HL, HL
 16+++8177 29               ADD HL, HL
 17+++8178 29               ADD HL, HL
 18+++8179 29               ADD HL, HL; HL = HL *32
 19+++817A 3A CB 81         LD A, (Middle)
 20+++817D 81               ADD C
 21+++817E 4F               LD C, A
 22+++817F 59               LD E, C
 23+++8180 16 00            LD D, 0 ; DE = C
 24+++8182 19               ADD HL, DE
 25+++8183 11 00 58         LD DE, $5800
 26+++8186 19               ADD HL, DE ; HL = Y*32 + X + $5800
 27+++8187 C1               POP BC
 28+++8188 F1               POP AF
 29+++8189 36 00            LD (HL), 0
 30+++818B D1               POP DE
 31+++818C F1               POP AF
 32+++818D C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
 42++ 818E                  INCLUDE last-position.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
  1+++818E              LASTPOSITION:
  2+++818E              ;---------------------------
  3+++818E 3A C9 81         LD A, (IXCounter)
  4+++8191 47               LD B, A
  5+++8192              return:
  6+++8192 DD 2B            DEC IX
  7+++8194 10 FC            DJNZ return
  8+++8196
  9+++8196 3E 00            LD A, 0
 10+++8198 32 C9 81         LD (IXCounter), A
 11+++819B C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
 43++ 819C                  INCLUDE tetro-random.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
  1+++819C              RANDOMTETRO:
  2+++819C ED 5F            LD A, R
  3+++819E E6 1F            AND 31
  4+++81A0 FE 13            CP 19
  5+++81A2 38 02            JR C, continue
  6+++81A4 D6 13            SUB 19
  7+++81A6              continue:
  8+++81A6 DD 21 AC 86      LD IX, T_O
  9+++81AA 11 0C 00         LD DE, ANCHOTETRO
 10+++81AD B7               OR A
 11+++81AE 28 05            JR Z, randomend
 12+++81B0              more:
 13+++81B0 DD 19            ADD IX, DE
 14+++81B2 3D               DEC A
 15+++81B3 20 FB            JR NZ, more
 16+++81B5
 17+++81B5              randomend:
 18+++81B5 C9               RET
 19+++81B6              ;-------------------------------
 20+++81B6              ANCHOTETRO EQU T_L1 - T_O
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
 44++ 81B6                  INCLUDE IYReturn.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
  1+++81B6              RETURNIY:
  2+++81B6              ;----------------------------
  3+++81B6 FD 7E 00         LD A, (IY)
  4+++81B9 FE 00            CP 0
  5+++81BB 28 04            JR Z, final
  6+++81BD FD 2B            DEC IY
  7+++81BF 18 F5            JR RETURNIY
  8+++81C1
  9+++81C1
 10+++81C1              final:
 11+++81C1 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
 17+  81C2                  INCLUDE position-coords.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
  1++ 81C2              gamestatusstruct:
  2++ 81C2              ;--------------------
  3++ 81C2
  4++ 81C2 00           GameX: DB 0
  5++ 81C3 00           GameY: DB 0
  6++ 81C4 00 00        TetroPtr: DW 0
  7++ 81C6 00 00        DownCounter: DW 0
  8++ 81C8 00           UndoKey: DB 0
  9++ 81C9 00           IXCounter: DB 0
 10++ 81CA 00           PosibleColor: DB 0
 11++ 81CB 0E           Middle: DB 14
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
 18+  81CC                  INCLUDE check-colision.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
  1++ 81CC              CHECKCOLISION:
  2++ 81CC              ;--------------------------------------------
  3++ 81CC DD 7E 00         LD A, (IX)
  4++ 81CF 57               LD D, A
  5++ 81D0 DD 23            INC IX
  6++ 81D2 3A C9 81         LD A, (IXCounter)
  7++ 81D5 3C               INC A
  8++ 81D6 32 C9 81         LD (IXCounter), A
  9++ 81D9 DD 7E 00         LD A, (IX)
 10++ 81DC 5F               LD E, A
 11++ 81DD 42               LD B, D
 12++ 81DE              fil:
 13++ 81DE C5               PUSH BC
 14++ 81DF 43               LD B, E
 15++ 81E0              cols:
 16++ 81E0 50               LD D, B
 17++ 81E1 DD 23            INC IX
 18++ 81E3 3A C9 81         LD A, (IXCounter)
 19++ 81E6 3C               INC A
 20++ 81E7 32 C9 81         LD (IXCounter), A
 21++ 81EA DD 7E 00         LD A, (IX)
 22++ 81ED 32 CA 81         LD (PosibleColor), A
 23++ 81F0 C1               POP BC
 24++ 81F1 4A               LD C, D
 25++ 81F2 CD 0B 82         CALL comprobarpunto
 26++ 81F5 FE 00            CP 0
 27++ 81F7 28 0A            JR Z, no_hay_color
 28++ 81F9              puede_haber_color:
 29++ 81F9 3A CA 81         LD A, (PosibleColor)
 30++ 81FC FE 00            CP 0
 31++ 81FE 28 03            JR Z, no_hay_color
 32++ 8200              hay_color:
 33++ 8200 3E 64            LD A, 100
 34++ 8202 C9               RET
 35++ 8203              no_hay_color:
 36++ 8203 C5               PUSH BC
 37++ 8204 42               LD B, D
 38++ 8205 10 D9            DJNZ cols
 39++ 8207 C1               POP BC
 40++ 8208 10 D4            DJNZ fil
 41++ 820A
 42++ 820A C9               RET
 43++ 820B              ;----------------------------------------
 44++ 820B                  INCLUDE check-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
  1+++820B              comprobarpunto:
  2+++820B              ;-------------------------------------------------------
  3+++820B D5               PUSH DE
  4+++820C F5               PUSH AF
  5+++820D C5               PUSH BC
  6+++820E
  7+++820E 68               LD L, B
  8+++820F FD 7E 00         LD A, (IY)
  9+++8212 85               ADD L
 10+++8213 6F               LD L, A
 11+++8214 26 00            LD H, 0 ; HL = B
 12+++8216 29               ADD HL, HL
 13+++8217 29               ADD HL, HL
 14+++8218 29               ADD HL, HL
 15+++8219 29               ADD HL, HL
 16+++821A 29               ADD HL, HL; HL = HL *32
 17+++821B 3A CB 81         LD A, (Middle)
 18+++821E 81               ADD C
 19+++821F 4F               LD C, A
 20+++8220 59               LD E, C
 21+++8221 16 00            LD D, 0 ; DE = C
 22+++8223 19               ADD HL, DE
 23+++8224 11 00 58         LD DE, $5800
 24+++8227 19               ADD HL, DE ; HL = Y*32 + X + $5800
 25+++8228 C1               POP BC
 26+++8229 F1               POP AF
 27+++822A D1               POP DE
 28+++822B 7E               LD A, (HL)
 29+++822C C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
 19+  822D                  INCLUDE turn-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
  1++ 822D              TURNTETRO:
  2++ 822D              ;--------------------------------------------------------------------
  3++ 822D
  4++ 822D 01 FE FB         LD BC,$FBFE        ; Escanear línea  T,R,E,W,Q
  5++ 8230 ED 78            IN A,(C)
  6++ 8232 CB 47            BIT 0,A
  7++ 8234 28 11            JR Z, turn_left    ; Han pulsado Q -> Girar izquierda
  8++ 8236 CB 4F            BIT 1,A
  9++ 8238 20 00            JR NZ, turn_right  ; Han pulsado W -> Girar derecha
 10++ 823A
 11++ 823A              turn_right:
 12++ 823A DD 6E 0A         LD L, (IX + 10)
 13++ 823D DD 66 0B         LD H, (IX + 11)
 14++ 8240 E5 DD E1         LD IX, HL
 15++ 8243 18 0E            JR SoltarTecla     ; Esperar q que suelten la tecla
 16++ 8245 18 13            JR no_tecla         ; No hay tecla pulsada
 17++ 8247
 18++ 8247              turn_left:
 19++ 8247 DD 6E 08         LD L, (IX + 8)
 20++ 824A DD 66 09         LD H, (IX + 9)
 21++ 824D E5 DD E1         LD IX, HL
 22++ 8250 18 01            JR SoltarTecla     ; Esperar q que suelten la tecla
 23++ 8252 C9               RET
 24++ 8253
 25++ 8253
 26++ 8253              SoltarTecla:           ; Rutina de espera hasta que se suelta la tecla
 27++ 8253 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 28++ 8255 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 29++ 8257 20 FA            JR NZ,SoltarTecla  ; esperar hasta que no haya tecla pulsada
 30++ 8259 C9               RET
 31++ 825A
 32++ 825A              no_tecla:
 33++ 825A C9               RET
 34++ 825B
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
 20+  825B                  INCLUDE tetro-move.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-move.asm
  1++ 825B              TETROMOVE:
  2++ 825B              ;----------------------------------------
  3++ 825B
  4++ 825B 01 FE BF         LD BC,$BFFE       ; Escanear línea  H,J,K,L,ENTER
  5++ 825E ED 78            IN A,(C)
  6++ 8260 CB 5F            BIT 3,A
  7++ 8262 28 0F            JR Z, move_left    ; Han pulsado Q -> Girar izquierda
  8++ 8264 CB 57            BIT 2,A
  9++ 8266 20 00            JR NZ, move_right  ; Han pulsado W -> Girar derecha
 10++ 8268
 11++ 8268              move_right:
 12++ 8268 3A CB 81         LD A, (Middle)
 13++ 826B 3C               INC A
 14++ 826C 32 CB 81         LD (Middle), A
 15++ 826F 18 0C            JR SoltarTeclaMv     ; Esperar q que suelten la tecla
 16++ 8271 18 11            JR no_tecla_move     ; No hay tecla pulsada
 17++ 8273
 18++ 8273              move_left:
 19++ 8273 3A CB 81         LD A, (Middle)
 20++ 8276 3D               DEC A
 21++ 8277 32 CB 81         LD (Middle), A
 22++ 827A 18 01            JR SoltarTeclaMv     ; Esperar q que suelten la tecla
 23++ 827C C9               RET
 24++ 827D
 25++ 827D
 26++ 827D              SoltarTeclaMv:           ; Rutina de espera hasta que se suelta la tecla
 27++ 827D ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 28++ 827F FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 29++ 8281 20 FA            JR NZ,SoltarTeclaMv  ; esperar hasta que no haya tecla pulsada
 30++ 8283 C9               RET
 31++ 8284
 32++ 8284              no_tecla_move:
 33++ 8284 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-move.asm
 21+  8285
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
 16   8285                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  8285
  2+  8285              STARTSCREEN:                                   ;
  3+  8285 CD 99 83         CALL CLEARSCR                              ;
  4+  8288 CD 8B 82         CALL startInit                             ;
  5+  828B              ;-----------------------------------------------
  6+  828B              startInit:
  7+  828B              ;Imprimir título
  8+  828B 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  828D 06 03            LD B,3     ; Coordenada de la fila
 10+  828F 0E 08            LD C,8     ; Coordenada de la columna
 11+  8291 DD 21 EA 82      LD IX,StartTitle    ; Se añade el título
 12+  8295 CD 28 83         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  8298
 14+  8298              ;Imprimir pregunta
 15+  8298
 16+  8298 3E 04            LD A,4  ; Se da formato de color al texto
 17+  829A 06 0E            LD B,14 ; Coordenada de la fila
 18+  829C 0E 02            LD C,2  ; Coordenada de la columna
 19+  829E DD 21 FC 82      LD IX,StartQuestion ; Se añade la pregunta
 20+  82A2 CD 28 83         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  82A5
 22+  82A5 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  82A7 0E 1C            LD C,28 ; y 28(Columna)
 24+  82A9 CD B2 82         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  82AC 3E 84            LD A,4+$80  ; Se le da el formato
 26+  82AE 77               LD (HL),A   ; Se imprime el cursor
 27+  82AF
 28+  82AF CD CD 82         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  82B2
 30+  82B2
 31+  82B2              ;Función para guardar coordenadas
 32+  82B2              Coor_Atrib:
 33+  82B2 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  82B3 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  82B4 CB 3C            SRL H
 35+  82B6 CB 3C          SRL H
 35+  82B8 CB 3C          SRL H
 36+  82BA 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  82BB CB 27            SLA A
 37+  82BD CB 27          SLA A
 37+  82BF CB 27          SLA A
 37+  82C1 CB 27          SLA A
 37+  82C3 CB 27          SLA a
 38+  82C5 B1               OR c  ; Y C son los bits 0-4 de L
 39+  82C6 6F               LD L,A
 40+  82C7 01 00 58         LD BC, $5800
 41+  82CA 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  82CB F1               POP AF ; Se devuelve el registro AF del stack
 43+  82CC C9               RET
 44+  82CD
 45+  82CD              ;Rutina que guarda lo que pulsa el usuario
 46+  82CD              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  82CD 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  82D0 ED 78            IN A,(C)
 49+  82D2 CB 5F            BIT 3,A
 50+  82D4 28 0C            JR Z,T_N            ; Han pulsado N
 51+  82D6 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  82D9 ED 78            IN A,(C)
 53+  82DB CB 4F            BIT 1,A
 54+  82DD 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  82DF
 56+  82DF              T_S:
 57+  82DF 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  82E1 C9               RET
 59+  82E2
 60+  82E2              T_N:
 61+  82E2 C9               RET
 62+  82E3
 63+  82E3              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  82E3 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  82E5 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  82E7 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  82E9 C9               RET
 68+  82EA
 69+  82EA              ;----------------------------------------------------------------------------
 70+  82EA              ; Carga de ficheros y "variables"
 71+  82EA 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  82EE 4F 4D 45 20
 71+  82F2 54 4F 20 54
 71+  82F6 45 54 52 49
 71+  82FA 53 00
 72+  82FC 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  8300 69 61 72 20
 72+  8304 75 6E 61 20
 72+  8308 70 61 72 74
 72+  830C 69 64 61 3F
 72+  8310 20 28 53 2F
 72+  8314 4E 29 00
 73+  8317 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  831B 63 6F 6E 74
 73+  831F 65 73 74 61
 73+  8323 64 6F 3A 20
 73+  8327 00
 74+  8328
 75+  8328
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 17   8328                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  8328              ; -------------------------------
  2+  8328              ; ZX Spectrum Text print library
  3+  8328              ; Daniel León - AOC - UFV 2020
  4+  8328              ; -------------------------------
  5+  8328
  6+  8328
  7+  8328              ; ----------------------------------------------------------------------------------------
  8+  8328              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  8328              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  8328              ;		IN	B	: Row 0..23
 11+  8328              ;		IN	C	: Column 0..31
 12+  8328              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  8328              ; ----------------------------------------------------------------------------------------
 14+  8328 CD 37 83     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  832B              ; ----------------------------------------------------------------------------------------
 16+  832B              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  832B              ; ----------------------------------------------------------------------------------------
 18+  832B              ; PRINTSTR - Prints String - IX Points to the String start
 19+  832B              ; ----------------------------------------------------------------------------------------
 20+  832B DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  832E B7           			OR A						; check for end of string (0)
 22+  832F C8           			RET Z						; Finish printing if 0
 23+  8330 CD 65 83     			CALL PRINTCHNUM
 24+  8333 DD 23        			INC IX						; Move to next char in string
 25+  8335 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8337              ; ----------------------------------------------------------------------------------------
 27+  8337
 28+  8337
 29+  8337              ;-----------------------------------------------------------------------------------------
 30+  8337              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8337              ;-----------------------------------------------------------------------------------------
 32+  8337 32 AB 83     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  833A CD 40 83     PREP_PRT_2:	CALL CRtoSCREEN
 34+  833D C3 52 83     			JP CRtoATTR
 35+  8340              ;-----------------------------------------------------------------------------------------
 36+  8340
 37+  8340              ;-----------------------------------------------------------------------------------------
 38+  8340              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  8340              ;	IN  - B=Row, C=Column
 40+  8340              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  8340              ;	Conversion:
 42+  8340              ;			Row FFfff   Column CCCCC
 43+  8340              ;			HL=%010FF000 fffCCCCC
 44+  8340              ;-----------------------------------------------------------------------------------------
 45+  8340              CRtoSCREEN:
 46+  8340 78           			LD A,B						; %___FFfff
 47+  8341 F6 40        			OR #40						; %010FFfff
 48+  8343 E6 F8        			AND #F8						; %010FF000
 49+  8345 67           			LD H,A
 50+  8346
 51+  8346 78           			LD A,B						; %___FFfff
 52+  8347 E6 07        			AND #7						; %00000fff
 53+  8349 0F           			RRCA						; %f00000ff
 54+  834A 0F           			RRCA						; %ff00000f
 55+  834B 0F           			RRCA						; %fff00000
 56+  834C B1           			OR C						; %fffCCCCC
 57+  834D 6F           			LD L,A
 58+  834E 22 A7 83                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8351 C9                       RET
 60+  8352              ; ----------------------------------------------------------------------------------------
 61+  8352
 62+  8352
 63+  8352
 64+  8352              ;-----------------------------------------------------------------------------------------
 65+  8352              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8352              ;	IN  - B=Row, C=Column
 67+  8352              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8352              ;	Conversion:
 69+  8352              ;			Row FFfff   Column CCCCC
 70+  8352              ;			HL=%010110FF fffCCCCC
 71+  8352              ;-----------------------------------------------------------------------------------------
 72+  8352              CRtoATTR:
 73+  8352 78           			LD A,B						; %___FFfff
 74+  8353 0F           			RRCA						; %f000FFff
 75+  8354 0F           			RRCA						; %ff000FFf
 76+  8355 0F           			RRCA						; %fff000FF
 77+  8356 6F           			LD L,A
 78+  8357 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  8359 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  835B 67           			LD H,A
 81+  835C
 82+  835C 7D           			LD A,L						; %fff000FF
 83+  835D E6 E0        			AND #E0						; %fff00000
 84+  835F B1           			OR C						; %fffCCCCC
 85+  8360 6F           			LD L,A
 86+  8361
 87+  8361 22 A9 83                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8364 C9                       RET
 89+  8365              ; ----------------------------------------------------------------------------------------
 90+  8365
 91+  8365
 92+  8365
 93+  8365              ; ----------------------------------------------------------------------------------------
 94+  8365              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8365              ;-----------------------------------------------------------------------------------------
 96+  8365              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8365 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8367 6F           			LD L,A
 99+  8368 29           			ADD HL,HL
100+  8369 29           			ADD HL,HL
101+  836A 29           			ADD HL,HL
102+  836B 11 AC 82     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  836E 19           			ADD HL,DE
104+  836F EB           			EX  DE,HL					;Value in DE
105+  8370              			; Continues to printchar below
106+  8370              ; ----------------------------------------------------------------------------------------
107+  8370
108+  8370
109+  8370              ; ----------------------------------------------------------------------------------------
110+  8370              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8370              ; ----------------------------------------------------------------------------------------
112+  8370              PRINTCHAR:
113+  8370 06 08        			LD B,8						; 8 Lines per char
114+  8372 2A A7 83                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8375
116+  8375 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8376 77           			LD (HL),A					; Move to Printing location
118+  8377 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  8378 13                       INC DE 						; next line to be printed
120+  8379 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  837B 3A AB 83                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  837E 2A A9 83                 LD HL, (SCR_ATTR_PTR)
123+  8381 77                       LD (HL),A
124+  8382 21 A9 83                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8385 34                       INC (HL)					; Move Attribute cursor to next char
126+  8386 21 A7 83     			LD HL, SCR_CUR_PTR
127+  8389 34           			INC (HL)					; update Cursor pointer to next position
128+  838A C9                       RET
129+  838B              ; ----------------------------------------------------------------------------------------
130+  838B
131+  838B
132+  838B
133+  838B              ; ----------------------------------------------------------------------------------------
134+  838B              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  838B              ; 				Sets bright 1 and flash 0
136+  838B              ; ----------------------------------------------------------------------------------------
137+  838B 3A AB 83     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  838E E6 07                    AND 7						; get Attr INK in A
139+  8390 07           			RLCA
140+  8391 07           			RLCA
141+  8392 07           			RLCA						; move Ink to Paper
142+  8393 F6 40        			OR 64						; ink 0 bright 1
143+  8395 32 AB 83     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  8398 C9           			RET
145+  8399              ; ----------------------------------------------------------------------------------------
146+  8399
147+  8399
148+  8399
149+  8399
150+  8399 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  839C 11 01 40     			LD DE,$4001
152+  839F 01 FF 1A     			LD BC,6911
153+  83A2 36 00        			LD (HL),0
154+  83A4 ED B0        			LDIR
155+  83A6 C9           			RET
156+  83A7
157+  83A7
158+  83A7              SCR_CUR_PTR
158+  83A7 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  83A9 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  83AB 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  83AC
162+  83AC              CHARSET: incbin "charset.bin"			; Charset used
163+  86AC
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 18   86AC                  INCLUDE fichas.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
  1+  86AC              TETROMINOS:                            ;
  2+  86AC              ;---------------------------------------
  3+  86AC              ;Tetromino O
  4+  86AC 02 02 30 30  T_O: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  4+  86B0 30 30 00 00
  4+  86B4 AC 86 AC 86    DW T_O, T_O
  5+  86B8              ;Tetromino L
  6+  86B8 03 02 20 00  T_L1: DB 3, 2, 4*8, 0, 4*8, 0, 4*8, 4*8
  6+  86BC 20 00 20 20
  6+  86C0 C4 86 D0 86    DW T_L2, T_L3
  7+  86C4 02 03 00 00  T_L2: DB 2, 3, 0, 0, 4*8, 4*8, 4*8, 4*8
  7+  86C8 20 20 20 20
  7+  86CC DC 86 B8 86    DW T_L4, T_L1
  8+  86D0 02 03 20 20  T_L3: DB 2, 3, 4*8, 4*8, 4*8, 0, 0, 4*8
  8+  86D4 20 00 00 20
  8+  86D8 B8 86 DC 86    DW T_L1, T_L4
  9+  86DC 03 02 20 20  T_L4: DB 3, 2, 4*8, 4*8, 0, 4*8, 0, 4*8
  9+  86E0 00 20 00 20
  9+  86E4 D0 86 C4 86    DW T_L3, T_L2
 10+  86E8              ;Tetromino J
 11+  86E8 03 02 00 10  T_J1: DB 3, 2, 0, 2*8, 0, 2*8, 2*8, 2*8
 11+  86EC 00 10 10 10
 11+  86F0 F4 86 00 87    DW T_J2, T_J3
 12+  86F4 02 03 10 10  T_J2: DB 2, 3, 2*8, 2*8, 2*8, 0, 0, 2*8
 12+  86F8 10 00 00 10
 12+  86FC 0C 87 E8 86    DW T_J4, T_J1
 13+  8700 02 03 10 00  T_J3: DB 2, 3, 2*8, 0, 0, 2*8, 2*8, 2*8
 13+  8704 00 10 10 10
 13+  8708 E8 86 0C 87    DW T_J1, T_J4
 14+  870C 03 02 10 10  T_J4: DB 3, 2, 2*8, 2*8, 2*8, 0, 2*8, 0
 14+  8710 10 00 10 00
 14+  8714 F4 86 00 87    DW T_J2, T_J3
 15+  8718              ;Tetromino T
 16+  8718 02 03 28 28  T_T1: DB 2, 3, 5*8, 5*8, 5*8, 0, 5*8, 0
 16+  871C 28 00 28 00
 16+  8720 24 87 30 87    DW T_T2, T_T3
 17+  8724 03 02 28 00  T_T2: DB 3, 2, 5*8, 0, 5*8, 5*8, 5*8, 0
 17+  8728 28 28 28 00
 17+  872C 3C 87 18 87    DW T_T4, T_T1
 18+  8730 03 02 00 28  T_T3: DB 3, 2, 0, 5*8, 5*8, 5*8, 0, 5*8
 18+  8734 28 28 00 28
 18+  8738 18 87 3C 87    DW T_T1, T_T4
 19+  873C 02 03 00 28  T_T4: DB 2, 3, 0, 5*8, 0, 5*8, 5*8, 5*8
 19+  8740 00 28 28 28
 19+  8744 30 87 24 87    DW T_T3, T_T2
 20+  8748              ;Tetromino I
 21+  8748 04 01 30 30  T_I1: DB 4, 1, 6*8, 6*8, 6*8, 6*8, 0, 0
 21+  874C 30 30 00 00
 21+  8750 54 87 54 87    DW T_I2, T_I2
 22+  8754 01 04 30 30  T_I2: DB 1, 4, 6*8, 6*8, 6*8, 6*8, 0, 0
 22+  8758 30 30 00 00
 22+  875C 48 87 48 87    DW T_I1, T_I1
 23+  8760              ;Tetromino Z
 24+  8760 02 03 38 38  T_Z1: DB 2, 3, 7*8, 7*8, 0, 0, 7*8, 7*8
 24+  8764 00 00 38 38
 24+  8768 6C 87 6C 87    DW T_Z2, T_Z2
 25+  876C 03 02 00 38  T_Z2: DB 3, 2, 0, 7*8, 7*8, 7*8, 7*8, 0
 25+  8770 38 38 38 00
 25+  8774 60 87 60 87    DW T_Z1, T_Z1
 26+  8778              ;Tetromino S
 27+  8778 02 03 00 18  T_S1: DB 2, 3, 0, 3*8, 3*8, 3*8, 3*8, 0
 27+  877C 18 18 18 00
 27+  8780 84 87 84 87    DW T_S2, T_S2
 28+  8784 03 02 18 00  T_S2: DB 3, 2, 3*8, 0, 3*8, 3*8, 0, 3*8
 28+  8788 18 18 00 18
 28+  878C 78 87 84 87    DW T_S1, T_S2
 29+  8790
 30+  8790 00 01 02 03  row_coords: DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
 30+  8794 04 05 06 07
 30+  8798 08 09 0A 0B
 30+  879C 0C 0D 0E 0F
 30+  87A0 10 11 12 13
 30+  87A4 14 15 16
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
 19   87A7                  INCLUDE Tetris_3D.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
  1+  87A7 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  87AB 85 9D 81 FF
  2+  87AF
  3+  87AF              Tetris_3D:
  4+  87AF 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  87B1 DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  87B5
  7+  87B5              T3D3:
  8+  87B5
  9+  87B5 FD 21 A7 87      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  87B9
 11+  87B9 0E 08            LD C,8              ; 8 bytes del patrón
 12+  87BB              T3D2:
 13+  87BB 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  87BD FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  87C0              T3D1:
 16+  87C0 DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  87C3 DD 23            INC IX              ; Siguientes 8 pixels
 18+  87C5 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  87C7
 20+  87C7 0D               DEC C               ; Fin del 2º Bucle
 21+  87C8 FD 23            inc IY              ; Siguiente byte del patrón
 22+  87CA 20 EF            JR NZ,T3D2
 23+  87CC
 24+  87CC 15               DEC D               ; Fin del 3º bucle
 25+  87CD 20 E6            JR NZ, T3D3
 26+  87CF
 27+  87CF C9               RET
 28+  87D0
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
