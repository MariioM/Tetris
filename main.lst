# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificacion para el emulador           ;
  2   0000                  ORG $8000 ;Programa empieza en $8000                           ;
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0                                 ;
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD 26 82         CALL STARTSCREEN ;Se llama a la pantalla de inicio
  7   8006              gameInit:
  8   8006 CD 3F 80         CALL MAINGAME ;Se llama al juego
  9   8009              gameEnd:
 10   8009 CD 0E 80         CALL ENDSCREEN ;Se llama a la pantalla final
 11   800C
 12   800C 18 FE        mainEnd: JR mainEnd ;Se queda en un bucle infinito
 13   800E              ;-------------------------------------------------------------------
 14   800E                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800E              ENDSCREEN:
  2+  800E CD 3A 83         CALL CLEARSCR
  3+  8011              ;--------------------------------------------------
  4+  8011              ;Imprime el GAME OVER
  5+  8011 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8013 06 0A            LD B,10    ; Coordenada de la fila
  7+  8015 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8017 DD 21 1F 80      LD IX, GameOverText   ; Se añade el título
  9+  801B CD C9 82         CALL PRINTAT
 10+  801E C9               RET
 11+  801F
 12+  801F
 13+  801F
 14+  801F
 15+  801F              ;---------------------------------------------------------
 16+  801F 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8023 20 4F 56 45
 16+  8027 52 00
 17+  8029 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802D 61 20 6A 75
 17+  8031 67 61 72 20
 17+  8035 64 65 20 6E
 17+  8039 75 65 76 6F
 17+  803D 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 15   803F                  INCLUDE game.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
  1+  803F              MAINGAME:                                 ;
  2+  803F CD 3A 83         CALL CLEARSCR  ;Limpia la pantalla    ;
  3+  8042              ;------------------------------------------
  4+  8042 CD 52 80         CALL CREATEBOARD ; Crea el tablero
  5+  8045              gameflow:
  6+  8045 CD 97 81         CALL RANDOMTETRO ; Geneta un tetromino aleatorio
  7+  8048 CD F7 80         CALL TETRODOWN ; Llama a la funcion que dibuja y mueve el tetromino hacia abajo
  8+  804B FE FE            CP 254 ;Comprueba el gaemover
  9+  804D 20 F6            JR NZ, gameflow ;Si no es gameover, sigue el juego
 10+  804F C9               RET ; Si es gameover, sale del juego
 11+  8050
 12+  8050 18 FE        fin: JR fin
 13+  8052              ;-----------------------------------------
 14+  8052                  INCLUDE create-board.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
  1++ 8052              CREATEBOARD:                                 ;
  2++ 8052 CD 3A 83         CALL CLEARSCR                         ;
  3++ 8055              ANCHO EQU 14                              ;
  4++ 8055              LARGO EQU 22                              ;
  5++ 8055              ;------------------------------------------
  6++ 8055 CD 51 87         CALL Tetris_3D
  7++ 8058 3E 20            LD A, 32
  8++ 805A D6 02            SUB 2
  9++ 805C D6 0E            SUB ANCHO
 10++ 805E CB 3F            SRL A
 11++ 8060 4F               LD C, A
 12++ 8061 3E 00            LD A, 0
 13++ 8063 C6 1F            ADD (32 - 1)
 14++ 8065 47               LD B, A
 15++ 8066 21 00 58         LD HL, $5800
 16++ 8069              bucle1:
 17++ 8069 23               INC HL
 18++ 806A 10 FD            DJNZ bucle1
 19++ 806C 06 16            LD B, LARGO
 20++ 806E              bucle:
 21++ 806E C5               PUSH BC
 22++ 806F 41               LD B, C
 23++ 8070              marco_izq:
 24++ 8070 23               INC HL
 25++ 8071 10 FD            DJNZ marco_izq
 26++ 8073 C5               PUSH BC
 27++ 8074              margenizq:
 28++ 8074 23               INC HL
 29++ 8075 0E 07            LD C, 7
 30++ 8077 79               LD A, C
 31++ 8078 87               ADD A
 32++ 8079 87               ADD A
 33++ 807A 87               ADD A
 34++ 807B 77               LD (HL), A
 35++ 807C 3E 00            LD A, 0
 36++ 807E 06 0E            LD B, ANCHO
 37++ 8080 80               ADD B
 38++ 8081 47               LD B, A
 39++ 8082              comienzo_ancho:
 40++ 8082 23               INC HL
 41++ 8083 10 FD            DJNZ comienzo_ancho
 42++ 8085              margendrcho:
 43++ 8085 23               INC HL
 44++ 8086 0E 07            LD C,7
 45++ 8088 79               LD A, C
 46++ 8089 87               ADD A
 47++ 808A 87               ADD A
 48++ 808B 87               ADD A
 49++ 808C 77               ld (HL), A
 50++ 808D
 51++ 808D C1               POP BC
 52++ 808E 41               LD B, C
 53++ 808F              marco_drcho
 54++ 808F 23               INC HL
 55++ 8090 10 FD            DJNZ marco_drcho
 56++ 8092 C1               POP BC
 57++ 8093 10 D9            DJNZ bucle
 58++ 8095
 59++ 8095 41               LD B, C
 60++ 8096              marco_izq_fila_ult:
 61++ 8096 23               INC HL
 62++ 8097 10 FD            DJNZ marco_izq_fila_ult
 63++ 8099              fila_ultima:
 64++ 8099 06 10            LD B, ANCHO + 2
 65++ 809B              bucle2:
 66++ 809B 23               INC HL
 67++ 809C 0E 07            LD C,7
 68++ 809E 79               LD A, C
 69++ 809F 87               ADD A
 70++ 80A0 87               ADD A
 71++ 80A1 87               ADD A
 72++ 80A2 77               ld (HL), A
 73++ 80A3 10 F6            DJNZ bucle2
 74++ 80A5
 75++ 80A5 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
 15+  80A6                  INCLUDE draw-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
  1++ 80A6              DRAWTETRO:
  2++ 80A6              ;---------------------------------------------
  3++ 80A6 DD 7E 00         LD A, (IX)
  4++ 80A9 57               LD D, A
  5++ 80AA DD 23            INC IX
  6++ 80AC 3A C4 81         LD A, (IXCounter)
  7++ 80AF 3C               INC A
  8++ 80B0 32 C4 81         LD (IXCounter), A
  9++ 80B3 DD 7E 00         LD A, (IX)
 10++ 80B6 5F               LD E, A
 11++ 80B7 42               LD B, D
 12++ 80B8              drawfilas:
 13++ 80B8 C5               PUSH BC
 14++ 80B9 43               LD B, E
 15++ 80BA              drawcolumnas:
 16++ 80BA 50               LD D, B
 17++ 80BB DD 23            INC IX
 18++ 80BD 3A C4 81         LD A, (IXCounter)
 19++ 80C0 3C               INC A
 20++ 80C1 32 C4 81         LD (IXCounter), A
 21++ 80C4 DD 7E 00         LD A, (IX)
 22++ 80C7 C1               POP BC
 23++ 80C8 4A               LD C, D
 24++ 80C9 CD D4 80         CALL DRAWPIXEL
 25++ 80CC C5               PUSH BC
 26++ 80CD 42               LD B, D
 27++ 80CE 10 EA            DJNZ drawcolumnas
 28++ 80D0 C1               POP BC
 29++ 80D1 10 E5            DJNZ drawfilas
 30++ 80D3
 31++ 80D3 C9               RET
 32++ 80D4              ;------------------------------------------
 33++ 80D4                  INCLUDE draw-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
  1+++80D4              DRAWPIXEL:
  2+++80D4 F5               PUSH AF
  3+++80D5 D5               PUSH DE
  4+++80D6 F5               PUSH AF
  5+++80D7 C5               PUSH BC
  6+++80D8              ;------------------------------------------------------
  7+++80D8 78               LD A, B
  8+++80D9 FD 86 00         ADD (IY)
  9+++80DC 47               LD B, A
 10+++80DD 68               LD L, B
 11+++80DE 26 00            LD H, 0 ; HL = B
 12+++80E0
 13+++80E0 29               ADD HL, HL
 14+++80E1 29               ADD HL, HL
 15+++80E2 29               ADD HL, HL
 16+++80E3 29               ADD HL, HL
 17+++80E4 29               ADD HL, HL; HL = HL *32
 18+++80E5 79               LD A, C
 19+++80E6 C6 0E            ADD 14
 20+++80E8 4F               LD C, A
 21+++80E9 59               LD E, C
 22+++80EA 16 00            LD D, 0 ; DE = C
 23+++80EC 19               ADD HL, DE
 24+++80ED 11 00 58         LD DE, $5800
 25+++80F0 19               ADD HL, DE ; HL = Y*32 + X + $5800
 26+++80F1 C1               POP BC
 27+++80F2 F1               POP AF
 28+++80F3 77               LD (HL), A
 29+++80F4 D1               POP DE
 30+++80F5 F1               POP AF
 31+++80F6 C9               RET
 32+++80F7              ;------------------------------------------------
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
 16+  80F7                  INCLUDE tetro-down.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
  1++ 80F7              TETRODOWN:
  2++ 80F7              ;-----------------------------------------
  3++ 80F7 FD 21 31 87      LD IY, row_coords
  4++ 80FB CD C6 81         CALL CHECKCOLISION
  5++ 80FE FE 64            CP 100
  6++ 8100 28 31            JR Z, goGameOver
  7++ 8102 CD 89 81         CALL LASTPOSITION
  8++ 8105
  9++ 8105              down:
 10++ 8105 C5               PUSH BC
 11++ 8106 CD A6 80         CALL DRAWTETRO
 12++ 8109 CD 89 81         CALL LASTPOSITION
 13++ 810C CD 38 81         CALL TETRODEL
 14++ 810F CD 89 81         CALL LASTPOSITION
 15++ 8112 FD 23            INC IY
 16++ 8114 CD C6 81         CALL CHECKCOLISION
 17++ 8117 FE 64            CP 100
 18++ 8119 28 08            JR Z, nexttetro
 19++ 811B 20 00            JR NZ, downcontinue
 20++ 811D              downcontinue:
 21++ 811D CD 89 81         CALL LASTPOSITION
 22++ 8120 C1               POP BC
 23++ 8121 18 E2            JR down
 24++ 8123              nexttetro:
 25++ 8123 CD 89 81         CALL LASTPOSITION
 26++ 8126 C1               POP BC
 27++ 8127 FD 2B            DEC IY
 28++ 8129 CD A6 80         CALL DRAWTETRO
 29++ 812C CD 89 81         CALL LASTPOSITION
 30++ 812F CD B1 81         CALL RETURNIY
 31++ 8132 C9               RET
 32++ 8133              goGameOver:
 33++ 8133 C1               POP BC
 34++ 8134 3E FE            LD A, 254
 35++ 8136 C9               RET
 36++ 8137              gamecontinue:
 37++ 8137 C9               RET
 38++ 8138              ;----------------------------------------------------
 39++ 8138                  INCLUDE del-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
  1+++8138              TETRODEL:
  2+++8138              ;------------------------------------------------------
  3+++8138 DD 7E 00         LD A, (IX)
  4+++813B 57               LD D, A
  5+++813C DD 23            INC IX
  6+++813E 3A C4 81         LD A, (IXCounter)
  7+++8141 3C               INC A
  8+++8142 32 C4 81         LD (IXCounter), A
  9+++8145 DD 7E 00         LD A, (IX)
 10+++8148 5F               LD E, A
 11+++8149 42               LD B, D
 12+++814A              rowdel:
 13+++814A C5               PUSH BC
 14+++814B 43               LD B, E
 15+++814C              columndel:
 16+++814C 50               LD D, B
 17+++814D DD 23            INC IX
 18+++814F 3A C4 81         LD A, (IXCounter)
 19+++8152 3C               INC A
 20+++8153 32 C4 81         LD (IXCounter), A
 21+++8156 3E 00            LD A, 0
 22+++8158 C1               POP BC
 23+++8159 4A               LD C, D
 24+++815A CD 65 81         CALL DELPIXEL
 25+++815D C5               PUSH BC
 26+++815E 42               LD B, D
 27+++815F 10 EB            DJNZ columndel
 28+++8161 C1               POP BC
 29+++8162 10 E6            DJNZ rowdel
 30+++8164
 31+++8164 C9               RET
 32+++8165              ;-----------------------------------------
 33+++8165                  INCLUDE del-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
  1+++8165              DELPIXEL:
  2+++8165              ;--------------------------------------------------
  3+++8165 F5               PUSH AF
  4+++8166 D5               PUSH DE
  5+++8167 F5               PUSH AF
  6+++8168 C5               PUSH BC
  7+++8169
  8+++8169 78               LD A, B
  9+++816A FD 86 00         ADD (IY)
 10+++816D 47               LD B, A
 11+++816E 68               LD L, B
 12+++816F 26 00            LD H, 0 ; HL = B
 13+++8171
 14+++8171 29               ADD HL, HL
 15+++8172 29               ADD HL, HL
 16+++8173 29               ADD HL, HL
 17+++8174 29               ADD HL, HL
 18+++8175 29               ADD HL, HL; HL = HL *32
 19+++8176 79               LD A, C
 20+++8177 C6 0E            ADD 14
 21+++8179 4F               LD C, A
 22+++817A 59               LD E, C
 23+++817B 16 00            LD D, 0 ; DE = C
 24+++817D 19               ADD HL, DE
 25+++817E 11 00 58         LD DE, $5800
 26+++8181 19               ADD HL, DE ; HL = Y*32 + X + $5800
 27+++8182 C1               POP BC
 28+++8183 F1               POP AF
 29+++8184 36 00            LD (HL), 0
 30+++8186 D1               POP DE
 31+++8187 F1               POP AF
 32+++8188 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
 40++ 8189                  INCLUDE last-position.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
  1+++8189              LASTPOSITION:
  2+++8189              ;---------------------------
  3+++8189 3A C4 81         LD A, (IXCounter)
  4+++818C 47               LD B, A
  5+++818D              return:
  6+++818D DD 2B            DEC IX
  7+++818F 10 FC            DJNZ return
  8+++8191
  9+++8191 3E 00            LD A, 0
 10+++8193 32 C4 81         LD (IXCounter), A
 11+++8196 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
 41++ 8197                  INCLUDE tetro-random.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
  1+++8197              RANDOMTETRO:
  2+++8197 ED 5F            LD A, R
  3+++8199 E6 1F            AND 31
  4+++819B FE 13            CP 19
  5+++819D 38 02            JR C, continue
  6+++819F D6 13            SUB 19
  7+++81A1              continue:
  8+++81A1 DD 21 4D 86      LD IX, T_O
  9+++81A5 11 0C 00         LD DE, ANCHOTETRO
 10+++81A8 B7               OR A
 11+++81A9 28 05            JR Z, randomend
 12+++81AB              more:
 13+++81AB DD 19            ADD IX, DE
 14+++81AD 3D               DEC A
 15+++81AE 20 FB            JR NZ, more
 16+++81B0
 17+++81B0              randomend:
 18+++81B0 C9               RET
 19+++81B1              ;-------------------------------
 20+++81B1              ANCHOTETRO EQU T_L1 - T_O
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
 42++ 81B1                  INCLUDE IYReturn.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
  1+++81B1              RETURNIY:
  2+++81B1              ;----------------------------
  3+++81B1 FD 7E 00         LD A, (IY)
  4+++81B4 FE 00            CP 0
  5+++81B6 28 04            JR Z, final
  6+++81B8 FD 2B            DEC IY
  7+++81BA 18 F5            JR RETURNIY
  8+++81BC
  9+++81BC
 10+++81BC              final:
 11+++81BC C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
 17+  81BD                  INCLUDE position-coords.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
  1++ 81BD              gamestatusstruct:
  2++ 81BD              ;--------------------
  3++ 81BD
  4++ 81BD 00           GameX: DB 0
  5++ 81BE 00           GameY: DB 0
  6++ 81BF 00 00        TetroPtr: DW 0
  7++ 81C1 00 00        DownCounter: DW 0
  8++ 81C3 00           UndoKey: DB 0
  9++ 81C4 00           IXCounter: DB 0
 10++ 81C5 00           PosibleColor: DB 0
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
 18+  81C6                  INCLUDE check-colision.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
  1++ 81C6              CHECKCOLISION:
  2++ 81C6              ;--------------------------------------------
  3++ 81C6 DD 7E 00         LD A, (IX)
  4++ 81C9 57               LD D, A
  5++ 81CA DD 23            INC IX
  6++ 81CC 3A C4 81         LD A, (IXCounter)
  7++ 81CF 3C               INC A
  8++ 81D0 32 C4 81         LD (IXCounter), A
  9++ 81D3 DD 7E 00         LD A, (IX)
 10++ 81D6 5F               LD E, A
 11++ 81D7 42               LD B, D
 12++ 81D8              fil:
 13++ 81D8 C5               PUSH BC
 14++ 81D9 43               LD B, E
 15++ 81DA              cols:
 16++ 81DA 50               LD D, B
 17++ 81DB DD 23            INC IX
 18++ 81DD 3A C4 81         LD A, (IXCounter)
 19++ 81E0 3C               INC A
 20++ 81E1 32 C4 81         LD (IXCounter), A
 21++ 81E4 DD 7E 00         LD A, (IX)
 22++ 81E7 32 C5 81         LD (PosibleColor), A
 23++ 81EA C1               POP BC
 24++ 81EB 4A               LD C, D
 25++ 81EC CD 05 82         CALL comprobarpunto
 26++ 81EF FE 00            CP 0
 27++ 81F1 28 0A            JR Z, no_hay_color
 28++ 81F3              puede_haber_color:
 29++ 81F3 3A C5 81         LD A, (PosibleColor)
 30++ 81F6 FE 00            CP 0
 31++ 81F8 28 03            JR Z, no_hay_color
 32++ 81FA              hay_color:
 33++ 81FA 3E 64            LD A, 100
 34++ 81FC C9               RET
 35++ 81FD              no_hay_color:
 36++ 81FD C5               PUSH BC
 37++ 81FE 42               LD B, D
 38++ 81FF 10 D9            DJNZ cols
 39++ 8201 C1               POP BC
 40++ 8202 10 D4            DJNZ fil
 41++ 8204
 42++ 8204 C9               RET
 43++ 8205              ;----------------------------------------
 44++ 8205                  INCLUDE check-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
  1+++8205              comprobarpunto:
  2+++8205              ;-------------------------------------------------------
  3+++8205 D5               PUSH DE
  4+++8206 F5               PUSH AF
  5+++8207 C5               PUSH BC
  6+++8208
  7+++8208 68               LD L, B
  8+++8209 FD 7E 00         LD A, (IY)
  9+++820C 85               ADD L
 10+++820D 6F               LD L, A
 11+++820E 26 00            LD H, 0 ; HL = B
 12+++8210 29               ADD HL, HL
 13+++8211 29               ADD HL, HL
 14+++8212 29               ADD HL, HL
 15+++8213 29               ADD HL, HL
 16+++8214 29               ADD HL, HL; HL = HL *32
 17+++8215 79               LD A, C
 18+++8216 C6 0E            ADD 14
 19+++8218 4F               LD C, A
 20+++8219 59               LD E, C
 21+++821A 16 00            LD D, 0 ; DE = C
 22+++821C 19               ADD HL, DE
 23+++821D 11 00 58         LD DE, $5800
 24+++8220 19               ADD HL, DE ; HL = Y*32 + X + $5800
 25+++8221 C1               POP BC
 26+++8222 F1               POP AF
 27+++8223 D1               POP DE
 28+++8224 7E               LD A, (HL)
 29+++8225 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
 19+  8226
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
 16   8226                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  8226
  2+  8226              STARTSCREEN:                                   ;
  3+  8226 CD 3A 83         CALL CLEARSCR                              ;
  4+  8229 CD 2C 82         CALL startInit                             ;
  5+  822C              ;-----------------------------------------------
  6+  822C              startInit:
  7+  822C              ;Imprimir título
  8+  822C 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  822E 06 03            LD B,3     ; Coordenada de la fila
 10+  8230 0E 08            LD C,8     ; Coordenada de la columna
 11+  8232 DD 21 8B 82      LD IX,StartTitle    ; Se añade el título
 12+  8236 CD C9 82         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  8239
 14+  8239              ;Imprimir pregunta
 15+  8239
 16+  8239 3E 04            LD A,4  ; Se da formato de color al texto
 17+  823B 06 0E            LD B,14 ; Coordenada de la fila
 18+  823D 0E 02            LD C,2  ; Coordenada de la columna
 19+  823F DD 21 9D 82      LD IX,StartQuestion ; Se añade la pregunta
 20+  8243 CD C9 82         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  8246
 22+  8246 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  8248 0E 1C            LD C,28 ; y 28(Columna)
 24+  824A CD 53 82         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  824D 3E 84            LD A,4+$80  ; Se le da el formato
 26+  824F 77               LD (HL),A   ; Se imprime el cursor
 27+  8250
 28+  8250 CD 6E 82         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  8253
 30+  8253
 31+  8253              ;Función para guardar coordenadas
 32+  8253              Coor_Atrib:
 33+  8253 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  8254 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  8255 CB 3C            SRL H
 35+  8257 CB 3C          SRL H
 35+  8259 CB 3C          SRL H
 36+  825B 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  825C CB 27            SLA A
 37+  825E CB 27          SLA A
 37+  8260 CB 27          SLA A
 37+  8262 CB 27          SLA A
 37+  8264 CB 27          SLA a
 38+  8266 B1               OR c  ; Y C son los bits 0-4 de L
 39+  8267 6F               LD L,A
 40+  8268 01 00 58         LD BC, $5800
 41+  826B 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  826C F1               POP AF ; Se devuelve el registro AF del stack
 43+  826D C9               RET
 44+  826E
 45+  826E              ;Rutina que guarda lo que pulsa el usuario
 46+  826E              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  826E 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  8271 ED 78            IN A,(C)
 49+  8273 CB 5F            BIT 3,A
 50+  8275 28 0C            JR Z,T_N            ; Han pulsado N
 51+  8277 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  827A ED 78            IN A,(C)
 53+  827C CB 4F            BIT 1,A
 54+  827E 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  8280
 56+  8280              T_S:
 57+  8280 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  8282 C9               RET
 59+  8283
 60+  8283              T_N:
 61+  8283 C9               RET
 62+  8284
 63+  8284              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  8284 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  8286 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  8288 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  828A C9               RET
 68+  828B
 69+  828B              ;----------------------------------------------------------------------------
 70+  828B              ; Carga de ficheros y "variables"
 71+  828B 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  828F 4F 4D 45 20
 71+  8293 54 4F 20 54
 71+  8297 45 54 52 49
 71+  829B 53 00
 72+  829D 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  82A1 69 61 72 20
 72+  82A5 75 6E 61 20
 72+  82A9 70 61 72 74
 72+  82AD 69 64 61 3F
 72+  82B1 20 28 53 2F
 72+  82B5 4E 29 00
 73+  82B8 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  82BC 63 6F 6E 74
 73+  82C0 65 73 74 61
 73+  82C4 64 6F 3A 20
 73+  82C8 00
 74+  82C9
 75+  82C9
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 17   82C9                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  82C9              ; -------------------------------
  2+  82C9              ; ZX Spectrum Text print library
  3+  82C9              ; Daniel León - AOC - UFV 2020
  4+  82C9              ; -------------------------------
  5+  82C9
  6+  82C9
  7+  82C9              ; ----------------------------------------------------------------------------------------
  8+  82C9              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  82C9              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  82C9              ;		IN	B	: Row 0..23
 11+  82C9              ;		IN	C	: Column 0..31
 12+  82C9              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  82C9              ; ----------------------------------------------------------------------------------------
 14+  82C9 CD D8 82     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  82CC              ; ----------------------------------------------------------------------------------------
 16+  82CC              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  82CC              ; ----------------------------------------------------------------------------------------
 18+  82CC              ; PRINTSTR - Prints String - IX Points to the String start
 19+  82CC              ; ----------------------------------------------------------------------------------------
 20+  82CC DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  82CF B7           			OR A						; check for end of string (0)
 22+  82D0 C8           			RET Z						; Finish printing if 0
 23+  82D1 CD 06 83     			CALL PRINTCHNUM
 24+  82D4 DD 23        			INC IX						; Move to next char in string
 25+  82D6 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  82D8              ; ----------------------------------------------------------------------------------------
 27+  82D8
 28+  82D8
 29+  82D8              ;-----------------------------------------------------------------------------------------
 30+  82D8              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  82D8              ;-----------------------------------------------------------------------------------------
 32+  82D8 32 4C 83     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  82DB CD E1 82     PREP_PRT_2:	CALL CRtoSCREEN
 34+  82DE C3 F3 82     			JP CRtoATTR
 35+  82E1              ;-----------------------------------------------------------------------------------------
 36+  82E1
 37+  82E1              ;-----------------------------------------------------------------------------------------
 38+  82E1              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  82E1              ;	IN  - B=Row, C=Column
 40+  82E1              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  82E1              ;	Conversion:
 42+  82E1              ;			Row FFfff   Column CCCCC
 43+  82E1              ;			HL=%010FF000 fffCCCCC
 44+  82E1              ;-----------------------------------------------------------------------------------------
 45+  82E1              CRtoSCREEN:
 46+  82E1 78           			LD A,B						; %___FFfff
 47+  82E2 F6 40        			OR #40						; %010FFfff
 48+  82E4 E6 F8        			AND #F8						; %010FF000
 49+  82E6 67           			LD H,A
 50+  82E7
 51+  82E7 78           			LD A,B						; %___FFfff
 52+  82E8 E6 07        			AND #7						; %00000fff
 53+  82EA 0F           			RRCA						; %f00000ff
 54+  82EB 0F           			RRCA						; %ff00000f
 55+  82EC 0F           			RRCA						; %fff00000
 56+  82ED B1           			OR C						; %fffCCCCC
 57+  82EE 6F           			LD L,A
 58+  82EF 22 48 83                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  82F2 C9                       RET
 60+  82F3              ; ----------------------------------------------------------------------------------------
 61+  82F3
 62+  82F3
 63+  82F3
 64+  82F3              ;-----------------------------------------------------------------------------------------
 65+  82F3              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  82F3              ;	IN  - B=Row, C=Column
 67+  82F3              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  82F3              ;	Conversion:
 69+  82F3              ;			Row FFfff   Column CCCCC
 70+  82F3              ;			HL=%010110FF fffCCCCC
 71+  82F3              ;-----------------------------------------------------------------------------------------
 72+  82F3              CRtoATTR:
 73+  82F3 78           			LD A,B						; %___FFfff
 74+  82F4 0F           			RRCA						; %f000FFff
 75+  82F5 0F           			RRCA						; %ff000FFf
 76+  82F6 0F           			RRCA						; %fff000FF
 77+  82F7 6F           			LD L,A
 78+  82F8 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  82FA F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  82FC 67           			LD H,A
 81+  82FD
 82+  82FD 7D           			LD A,L						; %fff000FF
 83+  82FE E6 E0        			AND #E0						; %fff00000
 84+  8300 B1           			OR C						; %fffCCCCC
 85+  8301 6F           			LD L,A
 86+  8302
 87+  8302 22 4A 83                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8305 C9                       RET
 89+  8306              ; ----------------------------------------------------------------------------------------
 90+  8306
 91+  8306
 92+  8306
 93+  8306              ; ----------------------------------------------------------------------------------------
 94+  8306              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8306              ;-----------------------------------------------------------------------------------------
 96+  8306              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8306 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8308 6F           			LD L,A
 99+  8309 29           			ADD HL,HL
100+  830A 29           			ADD HL,HL
101+  830B 29           			ADD HL,HL
102+  830C 11 4D 82     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  830F 19           			ADD HL,DE
104+  8310 EB           			EX  DE,HL					;Value in DE
105+  8311              			; Continues to printchar below
106+  8311              ; ----------------------------------------------------------------------------------------
107+  8311
108+  8311
109+  8311              ; ----------------------------------------------------------------------------------------
110+  8311              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8311              ; ----------------------------------------------------------------------------------------
112+  8311              PRINTCHAR:
113+  8311 06 08        			LD B,8						; 8 Lines per char
114+  8313 2A 48 83                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8316
116+  8316 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8317 77           			LD (HL),A					; Move to Printing location
118+  8318 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  8319 13                       INC DE 						; next line to be printed
120+  831A 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  831C 3A 4C 83                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  831F 2A 4A 83                 LD HL, (SCR_ATTR_PTR)
123+  8322 77                       LD (HL),A
124+  8323 21 4A 83                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8326 34                       INC (HL)					; Move Attribute cursor to next char
126+  8327 21 48 83     			LD HL, SCR_CUR_PTR
127+  832A 34           			INC (HL)					; update Cursor pointer to next position
128+  832B C9                       RET
129+  832C              ; ----------------------------------------------------------------------------------------
130+  832C
131+  832C
132+  832C
133+  832C              ; ----------------------------------------------------------------------------------------
134+  832C              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  832C              ; 				Sets bright 1 and flash 0
136+  832C              ; ----------------------------------------------------------------------------------------
137+  832C 3A 4C 83     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  832F E6 07                    AND 7						; get Attr INK in A
139+  8331 07           			RLCA
140+  8332 07           			RLCA
141+  8333 07           			RLCA						; move Ink to Paper
142+  8334 F6 40        			OR 64						; ink 0 bright 1
143+  8336 32 4C 83     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  8339 C9           			RET
145+  833A              ; ----------------------------------------------------------------------------------------
146+  833A
147+  833A
148+  833A
149+  833A
150+  833A 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  833D 11 01 40     			LD DE,$4001
152+  8340 01 FF 1A     			LD BC,6911
153+  8343 36 00        			LD (HL),0
154+  8345 ED B0        			LDIR
155+  8347 C9           			RET
156+  8348
157+  8348
158+  8348              SCR_CUR_PTR
158+  8348 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  834A 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  834C 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  834D
162+  834D              CHARSET: incbin "charset.bin"			; Charset used
163+  864D
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 18   864D                  INCLUDE fichas.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
  1+  864D              TETROMINOS:                            ;
  2+  864D              ;---------------------------------------
  3+  864D              ;Tetromino O
  4+  864D 02 02 30 30  T_O: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  4+  8651 30 30 00 00
  4+  8655 4D 86 4D 86    DW T_O, T_O
  5+  8659              ;Tetromino L
  6+  8659 03 02 20 00  T_L1: DB 3, 2, 4*8, 0, 4*8, 0, 4*8, 4*8
  6+  865D 20 00 20 20
  6+  8661 65 86 71 86    DW T_L2, T_L3
  7+  8665 02 03 00 00  T_L2: DB 2, 3, 0, 0, 4*8, 4*8, 4*8, 4*8
  7+  8669 20 20 20 20
  7+  866D 7D 86 59 86    DW T_L4, T_L1
  8+  8671 03 02 20 20  T_L3: DB 3, 2, 4*8, 4*8, 4*8, 4*8, 0, 0
  8+  8675 20 20 00 00
  8+  8679 59 86 7D 86    DW T_L1, T_L4
  9+  867D 03 02 20 20  T_L4: DB 3, 2, 4*8, 4*8, 0, 4*8, 0, 4*8
  9+  8681 00 20 00 20
  9+  8685 65 86 71 86    DW T_L2, T_L3
 10+  8689              ;Tetromino J
 11+  8689 03 02 00 10  T_J1: DB 3, 2, 0, 2*8, 0, 2*8, 2*8, 2*8
 11+  868D 00 10 10 10
 11+  8691 95 86 A1 86    DW T_J2, T_J3
 12+  8695 02 03 10 10  T_J2: DB 2, 3, 2*8, 2*8, 2*8, 0, 0, 2*8
 12+  8699 10 00 00 10
 12+  869D AD 86 89 86    DW T_J4, T_J1
 13+  86A1 02 03 10 00  T_J3: DB 2, 3, 2*8, 0, 0, 2*8, 2*8, 2*8
 13+  86A5 00 10 10 10
 13+  86A9 89 86 AD 86    DW T_J1, T_J4
 14+  86AD 03 02 10 10  T_J4: DB 3, 2, 2*8, 2*8, 2*8, 0, 2*8, 0
 14+  86B1 10 00 10 00
 14+  86B5 95 86 A1 86    DW T_J2, T_J3
 15+  86B9              ;Tetromino T
 16+  86B9 02 03 28 28  T_T1: DB 2, 3, 5*8, 5*8, 5, 0, 5*8, 0
 16+  86BD 05 00 28 00
 16+  86C1 C5 86 D1 86    DW T_T2, T_T3
 17+  86C5 03 02 28 00  T_T2: DB 3, 2, 5*8, 0, 5*8, 5*8, 5*8, 0
 17+  86C9 28 28 28 00
 17+  86CD DD 86 B9 86    DW T_T4, T_T1
 18+  86D1 03 02 00 28  T_T3: DB 3, 2, 0, 5*8, 5*8, 5*8, 0, 5*8
 18+  86D5 28 28 00 28
 18+  86D9 B9 86 DD 86    DW T_T1, T_T4
 19+  86DD 02 03 00 28  T_T4: DB 2, 3, 0, 5*8, 0, 5*8, 5*8, 5*8
 19+  86E1 00 28 28 28
 19+  86E5 D1 86 C5 86    DW T_T3, T_T2
 20+  86E9              ;Tetromino I
 21+  86E9 04 01 30 30  T_I1: DB 4, 1, 6*8, 6*8, 6*8, 6*8, 0, 0
 21+  86ED 30 30 00 00
 21+  86F1 F5 86 F5 86    DW T_I2, T_I2
 22+  86F5 01 04 30 30  T_I2: DB 1, 4, 6*8, 6*8, 6*8, 6*8, 0, 0
 22+  86F9 30 30 00 00
 22+  86FD E9 86 E9 86    DW T_I1, T_I1
 23+  8701              ;Tetromino Z
 24+  8701 02 03 38 38  T_Z1: DB 2, 3, 7*8, 7*8, 0, 0, 7*8, 7*8
 24+  8705 00 00 38 38
 24+  8709 0D 87 0D 87    DW T_Z2, T_Z2
 25+  870D 03 02 00 38  T_Z2: DB 3, 2, 0, 7*8, 7*8, 7*8, 7*8, 0
 25+  8711 38 38 38 00
 25+  8715 01 87 01 87    DW T_Z1, T_Z1
 26+  8719              ;Tetromino S
 27+  8719 02 03 00 18  T_S1: DB 2, 3, 0, 3*8, 3*8, 3*8, 3*8, 0
 27+  871D 18 18 18 00
 27+  8721 25 87 25 87    DW T_S2, T_S2
 28+  8725 03 02 18 00  T_S2: DB 3, 2, 3*8, 0, 3*8, 3*8, 0, 3*8
 28+  8729 18 18 00 18
 28+  872D 19 87 25 87    DW T_S1, T_S2
 29+  8731
 30+  8731 00 01 02 03  row_coords: DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
 30+  8735 04 05 06 07
 30+  8739 08 09 0A 0B
 30+  873D 0C 0D 0E 0F
 30+  8741 10 11 12 13
 30+  8745 14 15 16 17
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
 19   8749                  INCLUDE Tetris_3D.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
  1+  8749 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  874D 85 9D 81 FF
  2+  8751
  3+  8751              Tetris_3D:
  4+  8751 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  8753 DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  8757
  7+  8757              T3D3:
  8+  8757
  9+  8757 FD 21 49 87      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  875B
 11+  875B 0E 08            LD C,8              ; 8 bytes del patrón
 12+  875D              T3D2:
 13+  875D 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  875F FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  8762              T3D1:
 16+  8762 DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  8765 DD 23            INC IX              ; Siguientes 8 pixels
 18+  8767 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  8769
 20+  8769 0D               DEC C               ; Fin del 2º Bucle
 21+  876A FD 23            inc IY              ; Siguiente byte del patrón
 22+  876C 20 EF            JR NZ,T3D2
 23+  876E
 24+  876E 15               DEC D               ; Fin del 3º bucle
 25+  876F 20 E6            JR NZ, T3D3
 26+  8771
 27+  8771 C9               RET
 28+  8772
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
