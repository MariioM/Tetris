# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
  1   0000                  DEVICE ZXSPECTRUM48 ;Especificacion para el emulador           ;
  2   0000                  ORG $8000 ;Programa empieza en $8000                           ;
  3   8000 31 00 00         LD SP, 0 ;Carga del stack en 0                                 ;
  4   8003              ;-------------------------------------------------------------------
  5   8003              gameStart:
  6   8003 CD E7 82         CALL STARTSCREEN ;Se llama a la pantalla de inicio
  7   8006              gameInit:
  8   8006 CD 3F 80         CALL MAINGAME ;Se llama al juego
  9   8009              gameEnd:
 10   8009 CD 0E 80         CALL ENDSCREEN ;Se llama a la pantalla final
 11   800C
 12   800C 18 FE        mainEnd: JR mainEnd ;Se queda en un bucle infinito
 13   800E              ;-------------------------------------------------------------------
 14   800E                  INCLUDE pantalla-final.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
  1+  800E              ENDSCREEN:
  2+  800E CD FB 83         CALL CLEARSCR
  3+  8011              ;--------------------------------------------------
  4+  8011              ;Imprime el GAME OVER
  5+  8011 3E 82            LD A,2+$80 ; Se da formato de color al texto
  6+  8013 06 0A            LD B,10    ; Coordenada de la fila
  7+  8015 0E 0C            LD C,12     ; Coordenada de la columna
  8+  8017 DD 21 1F 80      LD IX, GameOverText   ; Se añade el título
  9+  801B CD 8A 83         CALL PRINTAT
 10+  801E C9               RET
 11+  801F
 12+  801F
 13+  801F
 14+  801F
 15+  801F              ;---------------------------------------------------------
 16+  801F 47 41 4D 45  GameOverText: db "GAME OVER", 0 ; Texto de fin de partida
 16+  8023 20 4F 56 45
 16+  8027 52 00
 17+  8029 44 65 73 65  ContinueText: db "Desea jugar de nuevo?", 0 ; Pregunta continue
 17+  802D 61 20 6A 75
 17+  8031 67 61 72 20
 17+  8035 64 65 20 6E
 17+  8039 75 65 76 6F
 17+  803D 3F 00
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-final.asm
 15   803F                  INCLUDE game.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
  1+  803F              MAINGAME:                                 ;
  2+  803F CD FB 83         CALL CLEARSCR  ;Limpia la pantalla    ;
  3+  8042              ;------------------------------------------
  4+  8042 CD 57 80         CALL CREATEBOARD ; Crea el tablero
  5+  8045              gameflow:
  6+  8045 CD E1 81         CALL RANDOMTETRO ; Geneta un tetromino aleatorio
  7+  8048 3E 0E            LD A, 14
  8+  804A 32 1E 82         LD (Middle), A
  9+  804D CD 01 81         CALL TETRODOWN ; Llama a la funcion que dibuja y mueve el tetromino hacia abajo
 10+  8050 FE FE            CP 254 ;Comprueba el gaemover
 11+  8052 20 F1            JR NZ, gameflow ;Si no es gameover, sigue el juego
 12+  8054 C9               RET ; Si es gameover, sale del juego
 13+  8055
 14+  8055 18 FE        fin: JR fin
 15+  8057              ;-----------------------------------------
 16+  8057                  INCLUDE create-board.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
  1++ 8057              CREATEBOARD:                                 ;
  2++ 8057 CD FB 83         CALL CLEARSCR                         ;
  3++ 805A              ANCHO EQU 14                              ;
  4++ 805A              LARGO EQU 22                              ;
  5++ 805A              ;------------------------------------------
  6++ 805A CD 11 88         CALL Tetris_3D
  7++ 805D 3E 20            LD A, 32
  8++ 805F D6 02            SUB 2
  9++ 8061 D6 0E            SUB ANCHO
 10++ 8063 CB 3F            SRL A
 11++ 8065 4F               LD C, A
 12++ 8066 3E 00            LD A, 0
 13++ 8068 C6 1F            ADD (32 - 1)
 14++ 806A 47               LD B, A
 15++ 806B 21 00 58         LD HL, $5800
 16++ 806E              bucle1:
 17++ 806E 23               INC HL
 18++ 806F 10 FD            DJNZ bucle1
 19++ 8071 06 16            LD B, LARGO
 20++ 8073              bucle:
 21++ 8073 C5               PUSH BC
 22++ 8074 41               LD B, C
 23++ 8075              marco_izq:
 24++ 8075 23               INC HL
 25++ 8076 10 FD            DJNZ marco_izq
 26++ 8078 C5               PUSH BC
 27++ 8079              margenizq:
 28++ 8079 23               INC HL
 29++ 807A 0E 07            LD C, 7
 30++ 807C 79               LD A, C
 31++ 807D 87               ADD A
 32++ 807E 87               ADD A
 33++ 807F 87               ADD A
 34++ 8080 77               LD (HL), A
 35++ 8081 3E 00            LD A, 0
 36++ 8083 06 0E            LD B, ANCHO
 37++ 8085 80               ADD B
 38++ 8086 47               LD B, A
 39++ 8087              comienzo_ancho:
 40++ 8087 23               INC HL
 41++ 8088 10 FD            DJNZ comienzo_ancho
 42++ 808A              margendrcho:
 43++ 808A 23               INC HL
 44++ 808B 0E 07            LD C,7
 45++ 808D 79               LD A, C
 46++ 808E 87               ADD A
 47++ 808F 87               ADD A
 48++ 8090 87               ADD A
 49++ 8091 77               ld (HL), A
 50++ 8092
 51++ 8092 C1               POP BC
 52++ 8093 41               LD B, C
 53++ 8094              marco_drcho
 54++ 8094 23               INC HL
 55++ 8095 10 FD            DJNZ marco_drcho
 56++ 8097 C1               POP BC
 57++ 8098 10 D9            DJNZ bucle
 58++ 809A
 59++ 809A 41               LD B, C
 60++ 809B              marco_izq_fila_ult:
 61++ 809B 23               INC HL
 62++ 809C 10 FD            DJNZ marco_izq_fila_ult
 63++ 809E              fila_ultima:
 64++ 809E 06 10            LD B, ANCHO + 2
 65++ 80A0              bucle2:
 66++ 80A0 23               INC HL
 67++ 80A1 0E 07            LD C,7
 68++ 80A3 79               LD A, C
 69++ 80A4 87               ADD A
 70++ 80A5 87               ADD A
 71++ 80A6 87               ADD A
 72++ 80A7 77               ld (HL), A
 73++ 80A8 10 F6            DJNZ bucle2
 74++ 80AA
 75++ 80AA C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\create-board.asm
 17+  80AB                  INCLUDE draw-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
  1++ 80AB              DRAWTETRO:
  2++ 80AB              ;---------------------------------------------
  3++ 80AB DD 7E 00         LD A, (IX)
  4++ 80AE 57               LD D, A
  5++ 80AF DD 23            INC IX
  6++ 80B1 3A 18 82         LD A, (IXCounter)
  7++ 80B4 3C               INC A
  8++ 80B5 32 18 82         LD (IXCounter), A
  9++ 80B8 DD 7E 00         LD A, (IX)
 10++ 80BB 5F               LD E, A
 11++ 80BC 42               LD B, D
 12++ 80BD              drawfilas:
 13++ 80BD C5               PUSH BC
 14++ 80BE 43               LD B, E
 15++ 80BF              drawcolumnas:
 16++ 80BF 50               LD D, B
 17++ 80C0 DD 23            INC IX
 18++ 80C2 3A 18 82         LD A, (IXCounter)
 19++ 80C5 3C               INC A
 20++ 80C6 32 18 82         LD (IXCounter), A
 21++ 80C9 DD 7E 00         LD A, (IX)
 22++ 80CC C1               POP BC
 23++ 80CD 4A               LD C, D
 24++ 80CE CD D9 80         CALL DRAWPIXEL
 25++ 80D1 C5               PUSH BC
 26++ 80D2 42               LD B, D
 27++ 80D3 10 EA            DJNZ drawcolumnas
 28++ 80D5 C1               POP BC
 29++ 80D6 10 E5            DJNZ drawfilas
 30++ 80D8
 31++ 80D8 C9               RET
 32++ 80D9              ;------------------------------------------
 33++ 80D9                  INCLUDE draw-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
  1+++80D9              DRAWPIXEL:
  2+++80D9 F5               PUSH AF
  3+++80DA D5               PUSH DE
  4+++80DB F5               PUSH AF
  5+++80DC C5               PUSH BC
  6+++80DD              ;------------------------------------------------------
  7+++80DD 78               LD A, B
  8+++80DE FD 86 00         ADD (IY)
  9+++80E1 47               LD B, A
 10+++80E2 68               LD L, B
 11+++80E3 26 00            LD H, 0 ; HL = B
 12+++80E5
 13+++80E5 29               ADD HL, HL
 14+++80E6 29               ADD HL, HL
 15+++80E7 29               ADD HL, HL
 16+++80E8 29               ADD HL, HL
 17+++80E9 29               ADD HL, HL; HL = HL *32
 18+++80EA 3A 1E 82         LD A, (Middle)
 19+++80ED 81               ADD C
 20+++80EE 4F               LD C, A
 21+++80EF 59               LD E, C
 22+++80F0 16 00            LD D, 0 ; DE = C
 23+++80F2 19               ADD HL, DE
 24+++80F3 11 00 58         LD DE, $5800
 25+++80F6 19               ADD HL, DE ; HL = Y*32 + X + $5800
 26+++80F7 C1               POP BC
 27+++80F8 F1               POP AF
 28+++80F9 FE 00            CP 0
 29+++80FB 28 01            JR Z, tetroExistDraw
 30+++80FD 77               LD (HL), A
 31+++80FE              tetroExistDraw:
 32+++80FE D1               POP DE
 33+++80FF F1               POP AF
 34+++8100 C9               RET
 35+++8101              ;------------------------------------------------
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\draw-tetro.asm
 18+  8101                  INCLUDE tetro-down.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
  1++ 8101              TETRODOWN:
  2++ 8101              ;-----------------------------------------
  3++ 8101 FD 21 F2 87      LD IY, row_coords
  4++ 8105 CD 1F 82         CALL CHECKCOLISION
  5++ 8108 FE 64            CP 100
  6++ 810A 28 6B            JR Z, goGameOver
  7++ 810C CD D3 81         CALL LASTPOSITION
  8++ 810F
  9++ 810F              down:
 10++ 810F C5               PUSH BC
 11++ 8110 CD AB 80         CALL DRAWTETRO
 12++ 8113 CD D3 81         CALL LASTPOSITION
 13++ 8116 CD 07 82         CALL TETRODELAY
 14++ 8119 CD 7C 81         CALL TETRODEL
 15++ 811C CD D3 81         CALL LASTPOSITION
 16++ 811F FD 23            INC IY
 17++ 8121 CD BE 82         CALL TETROMOVE
 18++ 8124 CD 90 82         CALL TURNTETRO
 19++ 8127 CD 1F 82         CALL CHECKCOLISION
 20++ 812A FE 64            CP 100
 21++ 812C 28 08            JR Z, nexttetro
 22++ 812E 20 00            JR NZ, downcontinue
 23++ 8130
 24++ 8130              downcontinue:
 25++ 8130 CD D3 81         CALL LASTPOSITION
 26++ 8133 C1               POP BC
 27++ 8134 18 D9            JR down
 28++ 8136              nexttetro:
 29++ 8136 CD D3 81         CALL LASTPOSITION
 30++ 8139 3A 1E 82         LD A, (Middle)
 31++ 813C FE 07            CP 7
 32++ 813E 28 28            JR Z, left_wall
 33++ 8140 FE 08            CP 8
 34++ 8142 28 24            JR Z, left_wall
 35++ 8144 FE 14            CP 20
 36++ 8146 28 11            JR Z, right_wall
 37++ 8148 FE 15            CP 21
 38++ 814A 28 0D            JR Z, right_wall
 39++ 814C C1               POP BC
 40++ 814D FD 2B            DEC IY
 41++ 814F CD AB 80         CALL DRAWTETRO
 42++ 8152 CD D3 81         CALL LASTPOSITION
 43++ 8155 CD FB 81         CALL RETURNIY
 44++ 8158 C9               RET
 45++ 8159              right_wall:
 46++ 8159 3D               DEC A
 47++ 815A 32 1E 82         LD (Middle), A
 48++ 815D CD 1F 82         CALL CHECKCOLISION
 49++ 8160 FE 64            CP 100
 50++ 8162 28 D2            JR Z, nexttetro
 51++ 8164 20 CA            JR NZ, downcontinue
 52++ 8166 18 A7            JR down
 53++ 8168              left_wall:
 54++ 8168 3C               INC A
 55++ 8169 32 1E 82         LD (Middle), A
 56++ 816C CD 1F 82         CALL CHECKCOLISION
 57++ 816F FE 64            CP 100
 58++ 8171 28 C3            JR Z, nexttetro
 59++ 8173 20 BB            JR NZ, downcontinue
 60++ 8175
 61++ 8175 18 98            JR down
 62++ 8177              goGameOver:
 63++ 8177 C1               POP BC
 64++ 8178 3E FE            LD A, 254
 65++ 817A C9               RET
 66++ 817B              gamecontinue:
 67++ 817B C9               RET
 68++ 817C              ;----------------------------------------------------
 69++ 817C                  INCLUDE del-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
  1+++817C              TETRODEL:
  2+++817C              ;------------------------------------------------------
  3+++817C DD 7E 00         LD A, (IX)
  4+++817F 57               LD D, A
  5+++8180 DD 23            INC IX
  6+++8182 3A 18 82         LD A, (IXCounter)
  7+++8185 3C               INC A
  8+++8186 32 18 82         LD (IXCounter), A
  9+++8189 DD 7E 00         LD A, (IX)
 10+++818C 5F               LD E, A
 11+++818D 42               LD B, D
 12+++818E              rowdel:
 13+++818E C5               PUSH BC
 14+++818F 43               LD B, E
 15+++8190              columndel:
 16+++8190 50               LD D, B
 17+++8191 DD 23            INC IX
 18+++8193 3A 18 82         LD A, (IXCounter)
 19+++8196 3C               INC A
 20+++8197 32 18 82         LD (IXCounter), A
 21+++819A DD 7E 00         LD A, (IX)
 22+++819D C1               POP BC
 23+++819E 4A               LD C, D
 24+++819F CD AA 81         CALL DELPIXEL
 25+++81A2 C5               PUSH BC
 26+++81A3 42               LD B, D
 27+++81A4 10 EA            DJNZ columndel
 28+++81A6 C1               POP BC
 29+++81A7 10 E5            DJNZ rowdel
 30+++81A9
 31+++81A9 C9               RET
 32+++81AA              ;-----------------------------------------
 33+++81AA                  INCLUDE del-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
  1+++81AA              DELPIXEL:
  2+++81AA              ;--------------------------------------------------
  3+++81AA F5               PUSH AF
  4+++81AB D5               PUSH DE
  5+++81AC F5               PUSH AF
  6+++81AD C5               PUSH BC
  7+++81AE
  8+++81AE 78               LD A, B
  9+++81AF FD 86 00         ADD (IY)
 10+++81B2 47               LD B, A
 11+++81B3 68               LD L, B
 12+++81B4 26 00            LD H, 0 ; HL = B
 13+++81B6
 14+++81B6 29               ADD HL, HL
 15+++81B7 29               ADD HL, HL
 16+++81B8 29               ADD HL, HL
 17+++81B9 29               ADD HL, HL
 18+++81BA 29               ADD HL, HL; HL = HL *32
 19+++81BB 3A 1E 82         LD A, (Middle)
 20+++81BE 81               ADD C
 21+++81BF 4F               LD C, A
 22+++81C0 59               LD E, C
 23+++81C1 16 00            LD D, 0 ; DE = C
 24+++81C3 19               ADD HL, DE
 25+++81C4 11 00 58         LD DE, $5800
 26+++81C7 19               ADD HL, DE ; HL = Y*32 + X + $5800
 27+++81C8 C1               POP BC
 28+++81C9 F1               POP AF
 29+++81CA FE 00            CP 0
 30+++81CC 28 02            JR Z, tetroExist
 31+++81CE 36 00            LD (HL), 0
 32+++81D0              tetroExist:
 33+++81D0 D1               POP DE
 34+++81D1 F1               POP AF
 35+++81D2 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\del-tetro.asm
 70++ 81D3                  INCLUDE last-position.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
  1+++81D3              LASTPOSITION:
  2+++81D3              ;---------------------------
  3+++81D3 3A 18 82         LD A, (IXCounter)
  4+++81D6 47               LD B, A
  5+++81D7              return:
  6+++81D7 DD 2B            DEC IX
  7+++81D9 10 FC            DJNZ return
  8+++81DB
  9+++81DB 3E 00            LD A, 0
 10+++81DD 32 18 82         LD (IXCounter), A
 11+++81E0 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\last-position.asm
 71++ 81E1                  INCLUDE tetro-random.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
  1+++81E1              RANDOMTETRO:
  2+++81E1 ED 5F            LD A, R
  3+++81E3 E6 1F            AND 31
  4+++81E5 FE 13            CP 19
  5+++81E7 38 02            JR C, continue
  6+++81E9 D6 13            SUB 19
  7+++81EB              continue:
  8+++81EB DD 21 0E 87      LD IX, T_O
  9+++81EF 11 0C 00         LD DE, ANCHOTETRO
 10+++81F2 B7               OR A
 11+++81F3 28 05            JR Z, randomend
 12+++81F5              more:
 13+++81F5 DD 19            ADD IX, DE
 14+++81F7 3D               DEC A
 15+++81F8 20 FB            JR NZ, more
 16+++81FA
 17+++81FA              randomend:
 18+++81FA C9               RET
 19+++81FB              ;-------------------------------
 20+++81FB              ANCHOTETRO EQU T_L1 - T_O
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-random.asm
 72++ 81FB                  INCLUDE IYReturn.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
  1+++81FB              RETURNIY:
  2+++81FB              ;----------------------------
  3+++81FB FD 7E 00         LD A, (IY)
  4+++81FE FE 00            CP 0
  5+++8200 28 04            JR Z, final
  6+++8202 FD 2B            DEC IY
  7+++8204 18 F5            JR RETURNIY
  8+++8206
  9+++8206
 10+++8206              final:
 11+++8206 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\IYReturn.asm
 73++ 8207                  INCLUDE delay-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\delay-tetro.asm
  1+++8207              TETRODELAY:
  2+++8207              ;------------------------------------------
  3+++8207 21 98 3A         LD HL, 15000
  4+++820A              delayloop:
  5+++820A 2B               DEC HL
  6+++820B 7C               LD A, H
  7+++820C F6 00            OR 0
  8+++820E 20 FA            JR NZ, delayloop
  9+++8210 C9               RET
 10+++8211
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\delay-tetro.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-down.asm
 19+  8211                  INCLUDE position-coords.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
  1++ 8211              gamestatusstruct:
  2++ 8211              ;--------------------
  3++ 8211
  4++ 8211 00           GameX: DB 0
  5++ 8212 00           GameY: DB 0
  6++ 8213 00 00        TetroPtr: DW 0
  7++ 8215 00 00        DownCounter: DW 0
  8++ 8217 00           UndoKey: DB 0
  9++ 8218 00           IXCounter: DB 0
 10++ 8219 00           PosibleColor: DB 0
 11++ 821A 00           NewColor: DB 0
 12++ 821B 00           OldColor: DB 0
 13++ 821C 00           GameXPosible: DB 0
 14++ 821D 00           GameYPosible: DB 0
 15++ 821E 0E           Middle: DB 14
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\position-coords.asm
 20+  821F                  INCLUDE check-colision.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
  1++ 821F              CHECKCOLISION:
  2++ 821F              ;--------------------------------------------
  3++ 821F DD 7E 00         LD A, (IX)
  4++ 8222 57               LD D, A
  5++ 8223 DD 23            INC IX
  6++ 8225 3A 18 82         LD A, (IXCounter)
  7++ 8228 3C               INC A
  8++ 8229 32 18 82         LD (IXCounter), A
  9++ 822C DD 7E 00         LD A, (IX)
 10++ 822F 5F               LD E, A
 11++ 8230 42               LD B, D
 12++ 8231              fil:
 13++ 8231 C5               PUSH BC
 14++ 8232 43               LD B, E
 15++ 8233              cols:
 16++ 8233 50               LD D, B
 17++ 8234 DD 23            INC IX
 18++ 8236 3A 18 82         LD A, (IXCounter)
 19++ 8239 3C               INC A
 20++ 823A 32 18 82         LD (IXCounter), A
 21++ 823D DD 7E 00         LD A, (IX)
 22++ 8240 32 1A 82         LD (NewColor), A
 23++ 8243 C1               POP BC
 24++ 8244 4A               LD C, D
 25++ 8245 CD 6E 82         CALL comprobarpunto
 26++ 8248 32 1B 82         LD (OldColor), A
 27++ 824B 78               LD A, B
 28++ 824C 32 1C 82         LD (GameXPosible), A
 29++ 824F 79               LD A, C
 30++ 8250 32 1D 82         LD (GameYPosible), A
 31++ 8253 3A 1B 82         LD A, (OldColor)
 32++ 8256 FE 00            CP 0
 33++ 8258 28 0C            JR Z, no_hay_color
 34++ 825A              puede_haber_color:
 35++ 825A 3A 1A 82         LD A, (NewColor)
 36++ 825D FE 00            CP 0
 37++ 825F 20 02            JR NZ, hay_color
 38++ 8261 28 03            JR Z, no_hay_color
 39++ 8263              hay_color:
 40++ 8263 3E 64            LD A, 100
 41++ 8265 C9               RET
 42++ 8266              no_hay_color:
 43++ 8266 C5               PUSH BC
 44++ 8267 42               LD B, D
 45++ 8268 10 C9            DJNZ cols
 46++ 826A C1               POP BC
 47++ 826B 10 C4            DJNZ fil
 48++ 826D
 49++ 826D C9               RET
 50++ 826E              ;----------------------------------------
 51++ 826E                  INCLUDE check-pixel.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
  1+++826E              comprobarpunto:
  2+++826E              ;-------------------------------------------------------
  3+++826E D5               PUSH DE
  4+++826F F5               PUSH AF
  5+++8270 C5               PUSH BC
  6+++8271
  7+++8271 68               LD L, B
  8+++8272 FD 7E 00         LD A, (IY)
  9+++8275 85               ADD L
 10+++8276 6F               LD L, A
 11+++8277 26 00            LD H, 0 ; HL = B
 12+++8279 29               ADD HL, HL
 13+++827A 29               ADD HL, HL
 14+++827B 29               ADD HL, HL
 15+++827C 29               ADD HL, HL
 16+++827D 29               ADD HL, HL; HL = HL *32
 17+++827E 3A 1E 82         LD A, (Middle)
 18+++8281 81               ADD C
 19+++8282 4F               LD C, A
 20+++8283 59               LD E, C
 21+++8284 16 00            LD D, 0 ; DE = C
 22+++8286 19               ADD HL, DE
 23+++8287 11 00 58         LD DE, $5800
 24+++828A 19               ADD HL, DE ; HL = Y*32 + X + $5800
 25+++828B C1               POP BC
 26+++828C F1               POP AF
 27+++828D D1               POP DE
 28+++828E 7E               LD A, (HL)
 29+++828F C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-pixel.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\check-colision.asm
 21+  8290                  INCLUDE turn-tetro.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
  1++ 8290              TURNTETRO:
  2++ 8290              ;--------------------------------------------------------------------
  3++ 8290
  4++ 8290 01 FE FB         LD BC,$FBFE        ; Escanear línea  T,R,E,W,Q
  5++ 8293 ED 78            IN A,(C)
  6++ 8295 CB 47            BIT 0,A
  7++ 8297 28 11            JR Z, turn_left    ; Han pulsado Q -> Girar izquierda
  8++ 8299 CB 4F            BIT 1,A
  9++ 829B 28 02            JR Z, turn_right  ; Han pulsado W -> Girar derecha
 10++ 829D 18 1E            JR no_tecla         ; No hay tecla pulsada
 11++ 829F
 12++ 829F              turn_right:
 13++ 829F DD 6E 0A         LD L, (IX + 10)
 14++ 82A2 DD 66 0B         LD H, (IX + 11)
 15++ 82A5 E5 DD E1         LD IX, HL
 16++ 82A8 18 0C            JR SoltarTecla     ; Esperar q que suelten la tecla
 17++ 82AA
 18++ 82AA              turn_left:
 19++ 82AA DD 6E 08         LD L, (IX + 8)
 20++ 82AD DD 66 09         LD H, (IX + 9)
 21++ 82B0 E5 DD E1         LD IX, HL
 22++ 82B3 18 01            JR SoltarTecla     ; Esperar q que suelten la tecla
 23++ 82B5 C9               RET
 24++ 82B6
 25++ 82B6
 26++ 82B6              SoltarTecla:           ; Rutina de espera hasta que se suelta la tecla
 27++ 82B6 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 28++ 82B8 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 29++ 82BA 20 FA            JR NZ,SoltarTecla  ; esperar hasta que no haya tecla pulsada
 30++ 82BC C9               RET
 31++ 82BD
 32++ 82BD              no_tecla:
 33++ 82BD C9               RET
 34++ 82BE
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\turn-tetro.asm
 22+  82BE                  INCLUDE tetro-move.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-move.asm
  1++ 82BE              TETROMOVE:
  2++ 82BE              ;----------------------------------------
  3++ 82BE
  4++ 82BE 01 FE BF         LD BC,$BFFE       ; Escanear línea  H,J,K,L,ENTER
  5++ 82C1 ED 78            IN A,(C)
  6++ 82C3 CB 5F            BIT 3,A
  7++ 82C5 28 0E            JR Z, move_left    ; Han pulsado J -> Mover izquierda
  8++ 82C7 CB 57            BIT 2,A
  9++ 82C9 28 00            JR Z, move_right  ; Han pulsado K -> Mover derecha
 10++ 82CB                  ;JR no_tecla_move     ; No hay tecla pulsada
 11++ 82CB
 12++ 82CB              move_right:
 13++ 82CB 3A 1E 82         LD A, (Middle)
 14++ 82CE 3C               INC A
 15++ 82CF 32 1E 82         LD (Middle), A
 16++ 82D2 18 0B            JR SoltarTeclaMv     ; Esperar q que suelten la tecla
 17++ 82D4 C9               RET
 18++ 82D5
 19++ 82D5              move_left:
 20++ 82D5 3A 1E 82         LD A, (Middle)
 21++ 82D8 3D               DEC A
 22++ 82D9 32 1E 82         LD (Middle), A
 23++ 82DC 18 01            JR SoltarTeclaMv     ; Esperar q que suelten la tecla
 24++ 82DE C9               RET
 25++ 82DF
 26++ 82DF
 27++ 82DF              SoltarTeclaMv:           ; Rutina de espera hasta que se suelta la tecla
 28++ 82DF ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 29++ 82E1 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 30++ 82E3 20 FA            JR NZ,SoltarTeclaMv  ; esperar hasta que no haya tecla pulsada
 31++ 82E5 C9               RET
 32++ 82E6
 33++ 82E6              no_tecla_move:
 34++ 82E6 C9               RET
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\tetro-move.asm
 23+  82E7
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\game.asm
 16   82E7                  INCLUDE pantalla-inicio.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
  1+  82E7
  2+  82E7              STARTSCREEN:                                   ;
  3+  82E7 CD FB 83         CALL CLEARSCR                              ;
  4+  82EA CD ED 82         CALL startInit                             ;
  5+  82ED              ;-----------------------------------------------
  6+  82ED              startInit:
  7+  82ED              ;Imprimir título
  8+  82ED 3E 83            LD A,3+$80 ; Se da formato de color al texto
  9+  82EF 06 03            LD B,3     ; Coordenada de la fila
 10+  82F1 0E 08            LD C,8     ; Coordenada de la columna
 11+  82F3 DD 21 4C 83      LD IX,StartTitle    ; Se añade el título
 12+  82F7 CD 8A 83         CALL PRINTAT    ; Se llama a la rutina que imprime el título
 13+  82FA
 14+  82FA              ;Imprimir pregunta
 15+  82FA
 16+  82FA 3E 04            LD A,4  ; Se da formato de color al texto
 17+  82FC 06 0E            LD B,14 ; Coordenada de la fila
 18+  82FE 0E 02            LD C,2  ; Coordenada de la columna
 19+  8300 DD 21 5E 83      LD IX,StartQuestion ; Se añade la pregunta
 20+  8304 CD 8A 83         CALL PRINTAT ; Se llama a la rutina para imprimir la pregunta
 21+  8307
 22+  8307 06 0E            LD B,14 ; Se pone el cursor en las coordenadas 14(fila)
 23+  8309 0E 1C            LD C,28 ; y 28(Columna)
 24+  830B CD 14 83         CALL Coor_Atrib ; Llamamos a la rutina encargada de devolver la dirección del atributo
 25+  830E 3E 84            LD A,4+$80  ; Se le da el formato
 26+  8310 77               LD (HL),A   ; Se imprime el cursor
 27+  8311
 28+  8311 CD 2F 83         CALL TecladoInicio    ; Se lee el input del teclado hasta que se pulse S o N
 29+  8314
 30+  8314
 31+  8314              ;Función para guardar coordenadas
 32+  8314              Coor_Atrib:
 33+  8314 F5               PUSH AF ; Se guarda el registro AF en el stack
 34+  8315 60               LD H,b  ; Los bits 4,5 de B deben ser los bits 0,1 de H
 35+  8316 CB 3C            SRL H
 35+  8318 CB 3C          SRL H
 35+  831A CB 3C          SRL H
 36+  831C 78               LD A,B  ; Los bits 0,1,2 de B deben ser los bits 5,6,7 de L
 37+  831D CB 27            SLA A
 37+  831F CB 27          SLA A
 37+  8321 CB 27          SLA A
 37+  8323 CB 27          SLA A
 37+  8325 CB 27          SLA a
 38+  8327 B1               OR c  ; Y C son los bits 0-4 de L
 39+  8328 6F               LD L,A
 40+  8329 01 00 58         LD BC, $5800
 41+  832C 09               ADD HL,BC ; Se le suma la dirección de memoria del comienzo de los atributos
 42+  832D F1               POP AF ; Se devuelve el registro AF del stack
 43+  832E C9               RET
 44+  832F
 45+  832F              ;Rutina que guarda lo que pulsa el usuario
 46+  832F              TecladoInicio:          ; Rutina para leer del teclado 'S' o 'N'
 47+  832F 01 FE 7F         LD BC,$7FFE         ; Escanear línea B,N,M,SYMB,Space
 48+  8332 ED 78            IN A,(C)
 49+  8334 CB 5F            BIT 3,A
 50+  8336 28 0C            JR Z,T_N            ; Han pulsado N
 51+  8338 01 FE FD         LD BC,$FDFE         ; Escanear línea G,F,D,S,A
 52+  833B ED 78            IN A,(C)
 53+  833D CB 4F            BIT 1,A
 54+  833F 20 EE            JR NZ,TecladoInicio       ; No han pulsado 'S'
 55+  8341
 56+  8341              T_S:
 57+  8341 18 02            JR Soltar_Tecla     ; Esperar q que suelten la tecla
 58+  8343 C9               RET
 59+  8344
 60+  8344              T_N:
 61+  8344 C9               RET
 62+  8345
 63+  8345              Soltar_Tecla:           ; Rutina de espera hasta que se suelta la tecla
 64+  8345 ED 78            IN A,(C)            ; Leer del puerto que se ha definido en Lee_Tecla
 65+  8347 FE FF            CP $FF              ; Comprobar que no hay tecla pulsada
 66+  8349 20 FA            JR NZ,Soltar_Tecla  ; esperar hasta que no haya tecla pulsada
 67+  834B C9               RET
 68+  834C
 69+  834C              ;----------------------------------------------------------------------------
 70+  834C              ; Carga de ficheros y "variables"
 71+  834C 57 45 4C 43  StartTitle: db "WELCOME TO TETRIS", 0 ;Título del tetris
 71+  8350 4F 4D 45 20
 71+  8354 54 4F 20 54
 71+  8358 45 54 52 49
 71+  835C 53 00
 72+  835E 49 6E 69 63  StartQuestion: db "Iniciar una partida? (S/N)", 0 ;Pregunta Inicio
 72+  8362 69 61 72 20
 72+  8366 75 6E 61 20
 72+  836A 70 61 72 74
 72+  836E 69 64 61 3F
 72+  8372 20 28 53 2F
 72+  8376 4E 29 00
 73+  8379 48 61 73 20  Respuesta: db "Has contestado: ",0  ; Mensaje con la respuesta
 73+  837D 63 6F 6E 74
 73+  8381 65 73 74 61
 73+  8385 64 6F 3A 20
 73+  8389 00
 74+  838A
 75+  838A
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\pantalla-inicio.asm
 17   838A                  INCLUDE printat.asm ;Se "importa" la rutina printat
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
  1+  838A              ; -------------------------------
  2+  838A              ; ZX Spectrum Text print library
  3+  838A              ; Daniel León - AOC - UFV 2020
  4+  838A              ; -------------------------------
  5+  838A
  6+  838A
  7+  838A              ; ----------------------------------------------------------------------------------------
  8+  838A              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  838A              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  838A              ;		IN	B	: Row 0..23
 11+  838A              ;		IN	C	: Column 0..31
 12+  838A              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  838A              ; ----------------------------------------------------------------------------------------
 14+  838A CD 99 83     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  838D              ; ----------------------------------------------------------------------------------------
 16+  838D              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  838D              ; ----------------------------------------------------------------------------------------
 18+  838D              ; PRINTSTR - Prints String - IX Points to the String start
 19+  838D              ; ----------------------------------------------------------------------------------------
 20+  838D DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  8390 B7           			OR A						; check for end of string (0)
 22+  8391 C8           			RET Z						; Finish printing if 0
 23+  8392 CD C7 83     			CALL PRINTCHNUM
 24+  8395 DD 23        			INC IX						; Move to next char in string
 25+  8397 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8399              ; ----------------------------------------------------------------------------------------
 27+  8399
 28+  8399
 29+  8399              ;-----------------------------------------------------------------------------------------
 30+  8399              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8399              ;-----------------------------------------------------------------------------------------
 32+  8399 32 0D 84     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  839C CD A2 83     PREP_PRT_2:	CALL CRtoSCREEN
 34+  839F C3 B4 83     			JP CRtoATTR
 35+  83A2              ;-----------------------------------------------------------------------------------------
 36+  83A2
 37+  83A2              ;-----------------------------------------------------------------------------------------
 38+  83A2              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  83A2              ;	IN  - B=Row, C=Column
 40+  83A2              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  83A2              ;	Conversion:
 42+  83A2              ;			Row FFfff   Column CCCCC
 43+  83A2              ;			HL=%010FF000 fffCCCCC
 44+  83A2              ;-----------------------------------------------------------------------------------------
 45+  83A2              CRtoSCREEN:
 46+  83A2 78           			LD A,B						; %___FFfff
 47+  83A3 F6 40        			OR #40						; %010FFfff
 48+  83A5 E6 F8        			AND #F8						; %010FF000
 49+  83A7 67           			LD H,A
 50+  83A8
 51+  83A8 78           			LD A,B						; %___FFfff
 52+  83A9 E6 07        			AND #7						; %00000fff
 53+  83AB 0F           			RRCA						; %f00000ff
 54+  83AC 0F           			RRCA						; %ff00000f
 55+  83AD 0F           			RRCA						; %fff00000
 56+  83AE B1           			OR C						; %fffCCCCC
 57+  83AF 6F           			LD L,A
 58+  83B0 22 09 84                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  83B3 C9                       RET
 60+  83B4              ; ----------------------------------------------------------------------------------------
 61+  83B4
 62+  83B4
 63+  83B4
 64+  83B4              ;-----------------------------------------------------------------------------------------
 65+  83B4              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  83B4              ;	IN  - B=Row, C=Column
 67+  83B4              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  83B4              ;	Conversion:
 69+  83B4              ;			Row FFfff   Column CCCCC
 70+  83B4              ;			HL=%010110FF fffCCCCC
 71+  83B4              ;-----------------------------------------------------------------------------------------
 72+  83B4              CRtoATTR:
 73+  83B4 78           			LD A,B						; %___FFfff
 74+  83B5 0F           			RRCA						; %f000FFff
 75+  83B6 0F           			RRCA						; %ff000FFf
 76+  83B7 0F           			RRCA						; %fff000FF
 77+  83B8 6F           			LD L,A
 78+  83B9 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  83BB F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  83BD 67           			LD H,A
 81+  83BE
 82+  83BE 7D           			LD A,L						; %fff000FF
 83+  83BF E6 E0        			AND #E0						; %fff00000
 84+  83C1 B1           			OR C						; %fffCCCCC
 85+  83C2 6F           			LD L,A
 86+  83C3
 87+  83C3 22 0B 84                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  83C6 C9                       RET
 89+  83C7              ; ----------------------------------------------------------------------------------------
 90+  83C7
 91+  83C7
 92+  83C7
 93+  83C7              ; ----------------------------------------------------------------------------------------
 94+  83C7              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  83C7              ;-----------------------------------------------------------------------------------------
 96+  83C7              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  83C7 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  83C9 6F           			LD L,A
 99+  83CA 29           			ADD HL,HL
100+  83CB 29           			ADD HL,HL
101+  83CC 29           			ADD HL,HL
102+  83CD 11 0E 83     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  83D0 19           			ADD HL,DE
104+  83D1 EB           			EX  DE,HL					;Value in DE
105+  83D2              			; Continues to printchar below
106+  83D2              ; ----------------------------------------------------------------------------------------
107+  83D2
108+  83D2
109+  83D2              ; ----------------------------------------------------------------------------------------
110+  83D2              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  83D2              ; ----------------------------------------------------------------------------------------
112+  83D2              PRINTCHAR:
113+  83D2 06 08        			LD B,8						; 8 Lines per char
114+  83D4 2A 09 84                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  83D7
116+  83D7 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  83D8 77           			LD (HL),A					; Move to Printing location
118+  83D9 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  83DA 13                       INC DE 						; next line to be printed
120+  83DB 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  83DD 3A 0D 84                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  83E0 2A 0B 84                 LD HL, (SCR_ATTR_PTR)
123+  83E3 77                       LD (HL),A
124+  83E4 21 0B 84                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  83E7 34                       INC (HL)					; Move Attribute cursor to next char
126+  83E8 21 09 84     			LD HL, SCR_CUR_PTR
127+  83EB 34           			INC (HL)					; update Cursor pointer to next position
128+  83EC C9                       RET
129+  83ED              ; ----------------------------------------------------------------------------------------
130+  83ED
131+  83ED
132+  83ED
133+  83ED              ; ----------------------------------------------------------------------------------------
134+  83ED              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  83ED              ; 				Sets bright 1 and flash 0
136+  83ED              ; ----------------------------------------------------------------------------------------
137+  83ED 3A 0D 84     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  83F0 E6 07                    AND 7						; get Attr INK in A
139+  83F2 07           			RLCA
140+  83F3 07           			RLCA
141+  83F4 07           			RLCA						; move Ink to Paper
142+  83F5 F6 40        			OR 64						; ink 0 bright 1
143+  83F7 32 0D 84     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  83FA C9           			RET
145+  83FB              ; ----------------------------------------------------------------------------------------
146+  83FB
147+  83FB
148+  83FB
149+  83FB
150+  83FB 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  83FE 11 01 40     			LD DE,$4001
152+  8401 01 FF 1A     			LD BC,6911
153+  8404 36 00        			LD (HL),0
154+  8406 ED B0        			LDIR
155+  8408 C9           			RET
156+  8409
157+  8409
158+  8409              SCR_CUR_PTR
158+  8409 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  840B 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  840D 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  840E
162+  840E              CHARSET: incbin "charset.bin"			; Charset used
163+  870E
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\printat.asm
 18   870E                  INCLUDE fichas.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
  1+  870E              TETROMINOS:                            ;
  2+  870E              ;---------------------------------------
  3+  870E              ;Tetromino O
  4+  870E 02 02 30 30  T_O: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  4+  8712 30 30 00 00
  4+  8716 0E 87 0E 87    DW T_O, T_O
  5+  871A              ;Tetromino L
  6+  871A 03 02 20 00  T_L1: DB 3, 2, 4*8, 0, 4*8, 0, 4*8, 4*8
  6+  871E 20 00 20 20
  6+  8722 26 87 32 87    DW T_L2, T_L3
  7+  8726 02 03 00 00  T_L2: DB 2, 3, 0, 0, 4*8, 4*8, 4*8, 4*8
  7+  872A 20 20 20 20
  7+  872E 3E 87 1A 87    DW T_L4, T_L1
  8+  8732 02 03 20 20  T_L3: DB 2, 3, 4*8, 4*8, 4*8, 0, 0, 4*8
  8+  8736 20 00 00 20
  8+  873A 1A 87 3E 87    DW T_L1, T_L4
  9+  873E 03 02 20 20  T_L4: DB 3, 2, 4*8, 4*8, 0, 4*8, 0, 4*8
  9+  8742 00 20 00 20
  9+  8746 32 87 26 87    DW T_L3, T_L2
 10+  874A              ;Tetromino J
 11+  874A 03 02 00 10  T_J1: DB 3, 2, 0, 2*8, 0, 2*8, 2*8, 2*8
 11+  874E 00 10 10 10
 11+  8752 56 87 62 87    DW T_J2, T_J3
 12+  8756 02 03 10 10  T_J2: DB 2, 3, 2*8, 2*8, 2*8, 0, 0, 2*8
 12+  875A 10 00 00 10
 12+  875E 6E 87 4A 87    DW T_J4, T_J1
 13+  8762 02 03 10 00  T_J3: DB 2, 3, 2*8, 0, 0, 2*8, 2*8, 2*8
 13+  8766 00 10 10 10
 13+  876A 4A 87 6E 87    DW T_J1, T_J4
 14+  876E 03 02 10 10  T_J4: DB 3, 2, 2*8, 2*8, 2*8, 0, 2*8, 0
 14+  8772 10 00 10 00
 14+  8776 56 87 62 87    DW T_J2, T_J3
 15+  877A              ;Tetromino T
 16+  877A 02 03 28 28  T_T1: DB 2, 3, 5*8, 5*8, 5*8, 0, 5*8, 0
 16+  877E 28 00 28 00
 16+  8782 86 87 92 87    DW T_T2, T_T3
 17+  8786 03 02 28 00  T_T2: DB 3, 2, 5*8, 0, 5*8, 5*8, 5*8, 0
 17+  878A 28 28 28 00
 17+  878E 9E 87 7A 87    DW T_T4, T_T1
 18+  8792 03 02 00 28  T_T3: DB 3, 2, 0, 5*8, 5*8, 5*8, 0, 5*8
 18+  8796 28 28 00 28
 18+  879A 7A 87 9E 87    DW T_T1, T_T4
 19+  879E 02 03 00 28  T_T4: DB 2, 3, 0, 5*8, 0, 5*8, 5*8, 5*8
 19+  87A2 00 28 28 28
 19+  87A6 92 87 86 87    DW T_T3, T_T2
 20+  87AA              ;Tetromino I
 21+  87AA 04 01 30 30  T_I1: DB 4, 1, 6*8, 6*8, 6*8, 6*8, 0, 0
 21+  87AE 30 30 00 00
 21+  87B2 B6 87 B6 87    DW T_I2, T_I2
 22+  87B6 01 04 30 30  T_I2: DB 1, 4, 6*8, 6*8, 6*8, 6*8, 0, 0
 22+  87BA 30 30 00 00
 22+  87BE AA 87 AA 87    DW T_I1, T_I1
 23+  87C2              ;Tetromino Z
 24+  87C2 02 03 38 38  T_Z1: DB 2, 3, 7*8, 7*8, 0, 0, 7*8, 7*8
 24+  87C6 00 00 38 38
 24+  87CA CE 87 CE 87    DW T_Z2, T_Z2
 25+  87CE 03 02 00 38  T_Z2: DB 3, 2, 0, 7*8, 7*8, 7*8, 7*8, 0
 25+  87D2 38 38 38 00
 25+  87D6 C2 87 C2 87    DW T_Z1, T_Z1
 26+  87DA              ;Tetromino S
 27+  87DA 02 03 00 18  T_S1: DB 2, 3, 0, 3*8, 3*8, 3*8, 3*8, 0
 27+  87DE 18 18 18 00
 27+  87E2 E6 87 E6 87    DW T_S2, T_S2
 28+  87E6 03 02 18 00  T_S2: DB 3, 2, 3*8, 0, 3*8, 3*8, 0, 3*8
 28+  87EA 18 18 00 18
 28+  87EE DA 87 E6 87    DW T_S1, T_S2
 29+  87F2
 30+  87F2 00 01 02 03  row_coords: DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
 30+  87F6 04 05 06 07
 30+  87FA 08 09 0A 0B
 30+  87FE 0C 0D 0E 0F
 30+  8802 10 11 12 13
 30+  8806 14 15 16
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\fichas.asm
 19   8809                  INCLUDE Tetris_3D.asm
# file opened: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
  1+  8809 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  880D 85 9D 81 FF
  2+  8811
  3+  8811              Tetris_3D:
  4+  8811 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  8813 DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  8817
  7+  8817              T3D3:
  8+  8817
  9+  8817 FD 21 09 88      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  881B
 11+  881B 0E 08            LD C,8              ; 8 bytes del patrón
 12+  881D              T3D2:
 13+  881D 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  881F FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  8822              T3D1:
 16+  8822 DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  8825 DD 23            INC IX              ; Siguientes 8 pixels
 18+  8827 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  8829
 20+  8829 0D               DEC C               ; Fin del 2º Bucle
 21+  882A FD 23            inc IY              ; Siguiente byte del patrón
 22+  882C 20 EF            JR NZ,T3D2
 23+  882E
 24+  882E 15               DEC D               ; Fin del 3º bucle
 25+  882F 20 E6            JR NZ, T3D3
 26+  8831
 27+  8831 C9               RET
 28+  8832
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\Tetris_3D.asm
# file closed: C:\Users\PC GAMING\Documents\Trabajos Uni\2º\Arquitectura\Tetris\main.asm
